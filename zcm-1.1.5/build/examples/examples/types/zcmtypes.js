/** THIS IS AN AUTOMATICALLY GENERATED FILE.
 *  DO NOT MODIFY BY HAND!!
 *
 *  Generated by zcm-gen
 **/

var ref = require('ref-napi');
var bigint = require('big-integer');

var UINT64_MAX = bigint('ffffffffffffffff', 16);
function rotateLeftOne(val)
{
    return val.shiftLeft(1).and(UINT64_MAX).add(val.shiftRight(63).and(1))
}

function createReader(data)
{
    let buf = new Buffer(data);
    let offset_byte = 0;
    let offset_bit = 0;
    let methods = {
        readDouble: function() {
            var ret = buf.readDoubleBE(offset_byte);
            offset_byte += 8;
            return ret;
        },
        readFloat: function() {
            var ret = buf.readFloatBE(offset_byte);
            offset_byte += 4;
            return ret;
        },
        read64: function() {
            var ret = bigint(ref.readInt64BE(buf, offset_byte));
            offset_byte += 8;
            return ret;
        },
        readU64: function() {
            var ret = bigint(ref.readUInt64BE(buf, offset_byte));
            offset_byte += 8;
            return ret;
        },
        read32: function() {
            var ret = buf.readInt32BE(offset_byte);
            offset_byte += 4;
            return ret;
        },
        read16: function() {
            var ret = buf.readInt16BE(offset_byte);
            offset_byte += 2;
            return ret;
        },
        read8: function() {
            var ret = buf.readInt8(offset_byte);
            offset_byte += 1;
            return ret;
        },
        readU8: function() {
            var ret = buf.readUInt8(offset_byte);
            offset_byte += 1;
            return ret;
        },
        readBoolean: function() {
            var ret = buf.readInt8(offset_byte);
            offset_byte += 1;
            return ret != 0;
        },
        readString: function() {
            var len = methods.read32();
            var ret = ref.readCString(buf, offset_byte);
            offset_byte += len;
            return ret;
        },
        readArray: function(size, readValFunc) {
            var arr = [size];
            for (var i = 0; i < size; ++i)
                arr[i] = readValFunc();
            return arr;
        },
        resetBits: function() {
            if (offset_bit !== 0) ++offset_byte;
            offset_bit = 0;
        },
        readBits: function(numbits, signExtend = true) {
            let bits_left = numbits;
            let ret;
            while (bits_left > 0) {
                const available_bits = 8 - offset_bit;
                const bits_covered = available_bits < bits_left ? available_bits : bits_left;
                const mask = ((1 << bits_covered) - 1) << (8 - bits_covered - offset_bit);
                const payload = (buf.readUInt8(offset_byte) & mask) << offset_bit;
                const shift = 8 - bits_left;
                if (bits_left == numbits) {
                    let signExtendedPayload = signExtend ?
                                              (payload << 24) >> 24 :
                                              (payload << 24) >>> 24;
                    if (numbits > 32) {
                        ret = bigint(signExtendedPayload).shiftRight(shift);
                    } else {
                        if (shift < 0) {
                            ret = signExtendedPayload << -shift;
                        } else {
                            if (signExtend) {
                                ret = signExtendedPayload >> shift;
                            } else {
                                ret = signExtendedPayload >>> shift;
                            }
                        }
                    }
                } else {
                    if (numbits > 32) {
                        ret = ret.or(bigint(payload).shiftRight(shift));
                    } else {
                        if (shift < 0) ret |= payload << -shift;
                        else           ret |= payload >>> shift;
                    }
                }
                bits_left -= bits_covered;
                offset_bit += bits_covered;
                if (offset_bit == 8) {
                    offset_bit = 0;
                    ++offset_byte;
                }
            }
            return ret;
        },
    };
    return methods;
}

function createWriter(size)
{
    let buf = new Buffer(size);
    let offset_byte = 0;
    let offset_bit = 0;
    let methods = {
        writeDouble: function(value) {
            buf.writeDoubleBE(value, offset_byte);
            offset_byte += 8;
        },
        writeFloat: function(value) {
            buf.writeFloatBE(value, offset_byte);
            offset_byte += 4;
        },
        write64: function(value) {
            ref.writeInt64BE(buf, offset_byte, bigint.isInstance(value) ?
                                          value.toString() : value);
            offset_byte += 8;
        },
        writeU64: function(value) {
            ref.writeUInt64BE(buf, offset_byte, bigint.isInstance(value) ?
                                           value.toString() : value);
            offset_byte += 8;
        },
        write32: function(value) {
            buf.writeInt32BE(value, offset_byte);
            offset_byte += 4;
        },
        write16: function(value) {
            buf.writeInt16BE(value, offset_byte);
            offset_byte += 2;
        },
        write8: function(value) {
            buf.writeInt8(value, offset_byte);
            offset_byte += 1;
        },
        writeU8: function(value) {
            buf.writeUInt8(value, offset_byte);
            offset_byte += 1;
        },
        writeBoolean: function(value) {
            buf.writeInt8(value, offset_byte);
            offset_byte += 1;
        },
        writeString: function(value) {
            methods.write32(value.length+1);
            ref.writeCString(buf, offset_byte, value);
            offset_byte += value.length+1;
        },
        resetBits: function() {
            if (offset_bit !== 0) ++offset_byte;
            offset_bit = 0;
        },
        writeBits: function(value, numbits) {
            const isbigint = bigint.isInstance(value);
            let bits_left = numbits;
            while (bits_left > 0) {
                if (offset_bit == 0) buf.writeUInt8(0, offset_byte);
                let payload = buf.readUInt8(offset_byte);
                const mask = isbigint ?
                             bigint(1).shiftLeft(bits_left).prev() :
                             (1 << bits_left) - 1;
                const shift = (offset_bit + bits_left) - 8;
                if (shift < 0) {
                    payload |= isbigint ?
                               value.and(mask).shiftLeft(-shift).toJSNumber() :
                               (value & mask) << -shift;
                    buf.writeUInt8(payload, offset_byte);
                    offset_bit += bits_left;
                    break;
                }
                payload |= isbigint ?
                           value.and(mask).shiftRight(shift).toJSNumber() :
                           (value & mask) >> shift;
                buf.writeUInt8(payload, offset_byte);
                bits_left = shift;
                offset_bit = 0;
                ++offset_byte;
            }
        },
        writeArray: function(arr, size, writeValFunc) {
            for (var i = 0; i < size; ++i)
                writeValFunc(arr[i]);
        },
        getBuffer: function() {
            return buf;
        },
    };
    return methods;
}

exports.bar = {};
exports.foo = {};
exports.foo.bar = {};
exports.test_package = {};

/********************************************/
// arrays_t
/********************************************/
function arrays_t()
{
    this.m = 0;
    this.n = 0;
    this.prim_onedim_static = new Array(3).fill(false);
    this.prim_onedim_dynamic = [];
    this.prim_twodim_static_static = new Array(3).fill(null).map(() => new Array(3).fill(0));
    this.prim_twodim_static_dynamic = new Array(3).fill(null).map(() => []);
    this.prim_twodim_dynamic_static = [];
    this.prim_twodim_dynamic_dynamic = [];
    this.nonprim_onedim_static = new Array(3).fill(new example_t());
    this.nonprim_onedim_dynamic = [];
    this.nonprim_twodim_static_static = new Array(3).fill(null).map(() => new Array(3).fill(new example_t()));
    this.nonprim_twodim_static_dynamic = new Array(3).fill(null).map(() => []);
    this.nonprim_twodim_dynamic_static = [];
    this.nonprim_twodim_dynamic_dynamic = [];

    this.IS_LITTLE_ENDIAN = false;

    this.__hash = arrays_t.__get_hash_recursive().toString();
}
arrays_t.__hash = null;
arrays_t.__get_hash_recursive = function(parents)
{
    if (arrays_t.__hash != null) return arrays_t.__hash
    if (!parents) parents = [];
    if (parents.indexOf('arrays_t') != -1) return 0;
    newparents = parents.slice(0, parents.length);
    newparents.push('arrays_t')
    var tmphash = bigint('7980005663146524523').add(example_t.__get_hash_recursive(newparents)).add(example_t.__get_hash_recursive(newparents)).add(example_t.__get_hash_recursive(newparents)).add(example_t.__get_hash_recursive(newparents)).add(example_t.__get_hash_recursive(newparents)).add(example_t.__get_hash_recursive(newparents)).and(UINT64_MAX);

    arrays_t.__hash = rotateLeftOne(tmphash);
    return arrays_t.__hash;
};
arrays_t.getEncodedSize = function(msg)
{
    return 8 + arrays_t.getEncodedSizeNoHash(msg);
}
arrays_t.getEncodedSizeNoHash = function(msg)
{
    var size = 0;
    size += 1; 	//m
    size += 1; 	//n
    size += 3 * 1; 	//prim_onedim_static
    size += msg.n * 2; 	//prim_onedim_dynamic
    size += 3 * 3 * 4; 	//prim_twodim_static_static
    size += 3 * msg.n * 8; 	//prim_twodim_static_dynamic
    size += msg.n * 3 * 4; 	//prim_twodim_dynamic_static
    size += msg.m * msg.n * 8; 	//prim_twodim_dynamic_dynamic
    for (var a0 = 0; a0 < 3; ++a0) {
        size += example_t.getEncodedSizeNoHash(msg.nonprim_onedim_static[a0]);
    }
    for (var a0 = 0; a0 < msg.n; ++a0) {
        size += example_t.getEncodedSizeNoHash(msg.nonprim_onedim_dynamic[a0]);
    }
    for (var a0 = 0; a0 < 3; ++a0) {
        for (var a1 = 0; a1 < 3; ++a1) {
            size += example_t.getEncodedSizeNoHash(msg.nonprim_twodim_static_static[a0][a1]);
        }
    }
    for (var a0 = 0; a0 < 3; ++a0) {
        for (var a1 = 0; a1 < msg.n; ++a1) {
            size += example_t.getEncodedSizeNoHash(msg.nonprim_twodim_static_dynamic[a0][a1]);
        }
    }
    for (var a0 = 0; a0 < msg.n; ++a0) {
        for (var a1 = 0; a1 < 3; ++a1) {
            size += example_t.getEncodedSizeNoHash(msg.nonprim_twodim_dynamic_static[a0][a1]);
        }
    }
    for (var a0 = 0; a0 < msg.m; ++a0) {
        for (var a1 = 0; a1 < msg.n; ++a1) {
            size += example_t.getEncodedSizeNoHash(msg.nonprim_twodim_dynamic_dynamic[a0][a1]);
        }
    }
    return size;
};
arrays_t_encode_one = function(msg, W)
{
    W.write8(msg.m);
    W.write8(msg.n);
    W.writeArray(msg.prim_onedim_static, 3, W.writeBoolean);
    W.writeArray(msg.prim_onedim_dynamic, msg.n, W.write16);
    for (var i0 = 0; i0 < 3; ++i0) {
        W.writeArray(msg.prim_twodim_static_static[i0], 3, W.write32);
    }
    for (var i0 = 0; i0 < 3; ++i0) {
        W.writeArray(msg.prim_twodim_static_dynamic[i0], msg.n, W.write64);
    }
    for (var i0 = 0; i0 < msg.n; ++i0) {
        W.writeArray(msg.prim_twodim_dynamic_static[i0], 3, W.writeFloat);
    }
    for (var i0 = 0; i0 < msg.m; ++i0) {
        W.writeArray(msg.prim_twodim_dynamic_dynamic[i0], msg.n, W.writeDouble);
    }
    for (var i0 = 0; i0 < 3; ++i0) {
        example_t_encode_one(msg.nonprim_onedim_static[i0], W)
    }
    for (var i0 = 0; i0 < msg.n; ++i0) {
        example_t_encode_one(msg.nonprim_onedim_dynamic[i0], W)
    }
    for (var i0 = 0; i0 < 3; ++i0) {
        for (var i1 = 0; i1 < 3; ++i1) {
            example_t_encode_one(msg.nonprim_twodim_static_static[i0][i1], W)
        }
    }
    for (var i0 = 0; i0 < 3; ++i0) {
        for (var i1 = 0; i1 < msg.n; ++i1) {
            example_t_encode_one(msg.nonprim_twodim_static_dynamic[i0][i1], W)
        }
    }
    for (var i0 = 0; i0 < msg.n; ++i0) {
        for (var i1 = 0; i1 < 3; ++i1) {
            example_t_encode_one(msg.nonprim_twodim_dynamic_static[i0][i1], W)
        }
    }
    for (var i0 = 0; i0 < msg.m; ++i0) {
        for (var i1 = 0; i1 < msg.n; ++i1) {
            example_t_encode_one(msg.nonprim_twodim_dynamic_dynamic[i0][i1], W)
        }
    }
}
arrays_t.encode = function(msg)
{
    var size = arrays_t.getEncodedSize(msg);
    var W = createWriter(size);
    W.writeU64(arrays_t.__get_hash_recursive());
    arrays_t_encode_one(msg, W);
    return W.getBuffer();
};
arrays_t.prototype.encode = function()
{
    return arrays_t.encode(this);
};
arrays_t_decode_one = function(R)
{
    var msg = new arrays_t();
    msg.m = R.read8();
    msg.n = R.read8();
    msg.prim_onedim_static = R.readArray(3, () => { return R.readBoolean(); })
    msg.prim_onedim_dynamic = R.readArray(msg.n, () => { return R.read16(); })
    msg.prim_twodim_static_static = []
    for (var i0 = 0; i0 < 3; ++i0) {
        msg.prim_twodim_static_static.push(R.readArray(3, () => { return R.read32(); }))
    }
    msg.prim_twodim_static_dynamic = []
    for (var i0 = 0; i0 < 3; ++i0) {
        msg.prim_twodim_static_dynamic.push(R.readArray(msg.n, () => { return R.read64(); }))
    }
    msg.prim_twodim_dynamic_static = []
    for (var i0 = 0; i0 < msg.n; ++i0) {
        msg.prim_twodim_dynamic_static.push(R.readArray(3, () => { return R.readFloat(); }))
    }
    msg.prim_twodim_dynamic_dynamic = []
    for (var i0 = 0; i0 < msg.m; ++i0) {
        msg.prim_twodim_dynamic_dynamic.push(R.readArray(msg.n, () => { return R.readDouble(); }))
    }
    msg.nonprim_onedim_static = [];
    for (var i0 = 0; i0 < 3; ++i0) {
        msg.nonprim_onedim_static.push(example_t_decode_one(R))
    }
    msg.nonprim_onedim_dynamic = [];
    for (var i0 = 0; i0 < msg.n; ++i0) {
        msg.nonprim_onedim_dynamic.push(example_t_decode_one(R))
    }
    msg.nonprim_twodim_static_static = []
    for (var i0 = 0; i0 < 3; ++i0) {
        msg.nonprim_twodim_static_static.push([]);
        for (var i1 = 0; i1 < 3; ++i1) {
            msg.nonprim_twodim_static_static[i0].push(example_t_decode_one(R))
        }
    }
    msg.nonprim_twodim_static_dynamic = []
    for (var i0 = 0; i0 < 3; ++i0) {
        msg.nonprim_twodim_static_dynamic.push([]);
        for (var i1 = 0; i1 < msg.n; ++i1) {
            msg.nonprim_twodim_static_dynamic[i0].push(example_t_decode_one(R))
        }
    }
    msg.nonprim_twodim_dynamic_static = []
    for (var i0 = 0; i0 < msg.n; ++i0) {
        msg.nonprim_twodim_dynamic_static.push([]);
        for (var i1 = 0; i1 < 3; ++i1) {
            msg.nonprim_twodim_dynamic_static[i0].push(example_t_decode_one(R))
        }
    }
    msg.nonprim_twodim_dynamic_dynamic = []
    for (var i0 = 0; i0 < msg.m; ++i0) {
        msg.nonprim_twodim_dynamic_dynamic.push([]);
        for (var i1 = 0; i1 < msg.n; ++i1) {
            msg.nonprim_twodim_dynamic_dynamic[i0].push(example_t_decode_one(R))
        }
    }
    return msg;
}
arrays_t.decode = function(data)
{
    var R = createReader(data);
    var hash = R.readU64();
    if (!hash.eq(arrays_t.__get_hash_recursive())) {
        console.error('Err: hash mismatch on arrays_t.')
        console.error('Received:\n', hash)
        console.error('Expected:\n', arrays_t.__get_hash_recursive());
        return null;
    }
    return arrays_t_decode_one(R);
};
arrays_t.IS_LITTLE_ENDIAN = false;
exports.arrays_t = arrays_t;


/********************************************/
// bitfield_t
/********************************************/
function bitfield_t()
{
    this.field1 = 0;
    this.field2 = new Array(2).fill(null).map(() => new Array(4).fill(0));
    this.field3 = 0;
    this.field4 = 0;
    this.field5 = 0;
    this.field6 = 0;
    this.field7 = 0;
    this.field8_dim1 = 0;
    this.field8_dim2 = 0;
    this.field8 = [];
    this.field9 = 0;
    this.field10 = 0;
    this.field11 = 0;
    this.field12 = new Array(3).fill(null).map(() => new Array(2).fill(null).map(() => new Array(2).fill(null).map(() => new Array(2).fill(0))));
    this.field13 = 0;
    this.field14 = 0;
    this.field15 = 0;
    this.field16 = 0;
    this.field17 = 0;
    this.field18 = 0;
    this.field19 = 0;
    this.field20 = 0;
    this.field21 = 0;
    this.field22 = 0;
    this.field23 = 0;
    this.field24 = 0;
    this.filler1 = 0;
    this.field25 = 0;
    this.field26 = 0;
    this.field27 = 0;
    this.field28 = 0;
    this.field29 = 0;
    this.field30 = 0;
    this.field31 = 0;
    this.field32 = 0;
    this.field33 = 0;
    this.field34 = 0;

    this.IS_LITTLE_ENDIAN = false;
    this.FIELD22_TEST = 0xff;
    this.FIELD23_TEST = 3;
    this.FIELD24_TEST = 0x07;
    this.SIGN_TEST_0 = 0x0f;
    this.SIGN_TEST_1 = -16;
    this.SIGN_TEST_2 = 0x7f;
    this.SIGN_TEST_3 = -128;
    this.SIGN_TEST_4 = 0x1fff;
    this.SIGN_TEST_5 = -8192;
    this.SIGN_TEST_6 = 0x7fff;
    this.SIGN_TEST_7 = -32768;
    this.SIGN_TEST_8 = 0x01ffffff;
    this.SIGN_TEST_9 = -33554432;
    this.SIGN_TEST_10 = 0x7fffffff;
    this.SIGN_TEST_11 = -2147483648;
    this.SIGN_TEST_12 = bigint("-1").toString();
    this.SIGN_TEST_13 = bigint("00ffffffffffffff", 16).toString();
    this.SIGN_TEST_14 = bigint("-72057594037927936").toString();
    this.SIGN_TEST_15 = bigint("7fffffffffffffff", 16).toString();
    this.SIGN_TEST_16 = bigint("-9223372036854775808").toString();
    this.SIGN_TEST_17 = 0x07;
    this.SIGN_TEST_18 = 0x7f;
    this.SIGN_TEST_19 = 0x07;
    this.SIGN_TEST_20 = 0x7f;
    this.SIGN_TEST_21 = 0x0007;
    this.SIGN_TEST_22 = 0x7fff;
    this.SIGN_TEST_23 = 0x00000007;
    this.SIGN_TEST_24 = 0x7fffffff;
    this.SIGN_TEST_25 = bigint("0000000000000001", 16).toString();
    this.SIGN_TEST_26 = bigint("0000000000000007", 16).toString();
    this.SIGN_TEST_27 = bigint("7fffffffffffffff", 16).toString();
    this.SIGN_TEST_28 = 0x7f;
    this.SIGN_TEST_29 = 0xff;
    this.SIGN_TEST_30 = 0x7f;
    this.SIGN_TEST_31 = -1;
    this.SIGN_TEST_32 = 127;
    this.SIGN_TEST_33 = -1;
    this.SIGN_TEST_34 = 0x7fff;
    this.SIGN_TEST_35 = -1;
    this.SIGN_TEST_36 = 32767;
    this.SIGN_TEST_37 = -1;
    this.SIGN_TEST_38 = 0x7fffffff;
    this.SIGN_TEST_39 = -1;
    this.SIGN_TEST_40 = 2147483647;
    this.SIGN_TEST_41 = -1;
    this.SIGN_TEST_42 = bigint("7fffffffffffffff", 16).toString();
    this.SIGN_TEST_43 = bigint("-1").toString();
    this.SIGN_TEST_44 = bigint("9223372036854775807").toString();
    this.SIGN_TEST_45 = bigint("-1").toString();

    this.__hash = bitfield_t.__get_hash_recursive().toString();
}
bitfield_t.__hash = null;
bitfield_t.__get_hash_recursive = function(parents)
{
    if (bitfield_t.__hash != null) return bitfield_t.__hash
    if (!parents) parents = [];
    if (parents.indexOf('bitfield_t') != -1) return 0;
    var tmphash = bigint('5653122201866558402').and(UINT64_MAX);

    bitfield_t.__hash = rotateLeftOne(tmphash);
    return bitfield_t.__hash;
};
bitfield_t.getEncodedSize = function(msg)
{
    return 8 + bitfield_t.getEncodedSizeNoHash(msg);
}
bitfield_t.getEncodedSizeNoHash = function(msg)
{
    var size = 0;
    size += 1; 	//field1
    size += 2 * 4 * 1; 	//field2
    size += 2; 	//field3
    size += 2; 	//field4
    size += 1; 	//field5
    size += 1; 	//field6
    size += 1; 	//field7
    size += 1; 	//field8_dim1
    size += 1; 	//field8_dim2
    size += msg.field8_dim1 * msg.field8_dim2 * 1; 	//field8
    size += 4; 	//field9
    size += 8; 	//field10
    size += 1; 	//field11
    size += 3 * 2 * 2 * 2 * 1; 	//field12
    size += 1; 	//field13
    size += 1; 	//field14
    size += 1; 	//field15
    size += 1; 	//field16
    size += 1; 	//field17
    size += 1; 	//field18
    size += 1; 	//field19
    size += 1; 	//field20
    size += 1; 	//field21
    size += 1; 	//field22
    size += 1; 	//field23
    size += 1; 	//field24
    size += 1; 	//filler1
    size += 1; 	//field25
    size += 1; 	//field26
    size += 1; 	//field27
    size += 1; 	//field28
    size += 2; 	//field29
    size += 2; 	//field30
    size += 4; 	//field31
    size += 4; 	//field32
    size += 8; 	//field33
    size += 8; 	//field34
    return size;
};
bitfield_t_encode_one = function(msg, W)
{
    W.writeBits(msg.field1, 2);
    for (var i0 = 0; i0 < 2; ++i0) {
        W.writeArray(msg.field2[i0], 4, (f) => { return W.writeBits(f, 1); });
    }
    W.writeBits(msg.field3, 4);
    W.writeBits(msg.field4, 3);
    W.resetBits();
    W.write8(msg.field5);
    W.writeBits(msg.field6, 2);
    W.writeBits(msg.field7, 3);
    W.writeBits(msg.field8_dim1, 4);
    W.resetBits();
    W.write8(msg.field8_dim2);
    for (var i0 = 0; i0 < msg.field8_dim1; ++i0) {
        W.writeArray(msg.field8[i0], msg.field8_dim2, (f) => { return W.writeBits(f, 3); });
    }
    W.writeBits(msg.field9, 28);
    W.writeBits(msg.field10, 55);
    W.writeBits(msg.field11, 2);
    for (var i0 = 0; i0 < 3; ++i0) {
        for (var i1 = 0; i1 < 2; ++i1) {
            for (var i2 = 0; i2 < 2; ++i2) {
                W.writeArray(msg.field12[i0][i1][i2], 2, (f) => { return W.writeBits(f, 3); });
            }
        }
    }
    W.resetBits();
    W.write8(msg.field13);
    W.writeBits(msg.field14, 4);
    W.writeBits(msg.field15, 7);
    W.writeBits(msg.field16, 7);
    W.resetBits();
    W.write8(msg.field17);
    W.writeBits(msg.field18, 4);
    W.writeBits(msg.field19, 7);
    W.writeBits(msg.field20, 7);
    W.resetBits();
    W.write8(msg.field21);
    W.writeBits(msg.field22, 8);
    W.writeBits(msg.field23, 3);
    W.writeBits(msg.field24, 3);
    W.resetBits();
    W.write8(msg.filler1);
    W.writeBits(msg.field25, 2);
    W.writeBits(msg.field26, 8);
    W.writeBits(msg.field27, 2);
    W.writeBits(msg.field28, 7);
    W.writeBits(msg.field29, 2);
    W.writeBits(msg.field30, 15);
    W.writeBits(msg.field31, 4);
    W.writeBits(msg.field32, 31);
    W.writeBits(msg.field33, 4);
    W.writeBits(msg.field34, 63);
    W.resetBits();
}
bitfield_t.encode = function(msg)
{
    var size = bitfield_t.getEncodedSize(msg);
    var W = createWriter(size);
    W.writeU64(bitfield_t.__get_hash_recursive());
    bitfield_t_encode_one(msg, W);
    return W.getBuffer();
};
bitfield_t.prototype.encode = function()
{
    return bitfield_t.encode(this);
};
bitfield_t_decode_one = function(R)
{
    var msg = new bitfield_t();
    msg.field1 = R.readBits(2, true);
    msg.field2 = []
    for (var i0 = 0; i0 < 2; ++i0) {
        msg.field2.push(R.readArray(4, () => { return R.readBits(1, true); }))
    }
    msg.field3 = R.readBits(4, true);
    msg.field4 = R.readBits(3, true);
    R.resetBits();
    msg.field5 = R.read8();
    msg.field6 = R.readBits(2, true);
    msg.field7 = R.readBits(3, true);
    msg.field8_dim1 = R.readBits(4, true);
    R.resetBits();
    msg.field8_dim2 = R.read8();
    msg.field8 = []
    for (var i0 = 0; i0 < msg.field8_dim1; ++i0) {
        msg.field8.push(R.readArray(msg.field8_dim2, () => { return R.readBits(3, true); }))
    }
    msg.field9 = R.readBits(28, true);
    msg.field10 = R.readBits(55, true);
    msg.field11 = R.readBits(2, false);
    msg.field12 = []
    for (var i0 = 0; i0 < 3; ++i0) {
        msg.field12.push([])
        for (var i1 = 0; i1 < 2; ++i1) {
            msg.field12[i0].push([])
            for (var i2 = 0; i2 < 2; ++i2) {
                msg.field12[i0][i1].push(R.readArray(2, () => { return R.readBits(3, false); }))
            }
        }
    }
    R.resetBits();
    msg.field13 = R.read8();
    msg.field14 = R.readBits(4, true);
    msg.field15 = R.readBits(7, true);
    msg.field16 = R.readBits(7, true);
    R.resetBits();
    msg.field17 = R.read8();
    msg.field18 = R.readBits(4, false);
    msg.field19 = R.readBits(7, false);
    msg.field20 = R.readBits(7, false);
    R.resetBits();
    msg.field21 = R.read8();
    msg.field22 = R.readBits(8, false);
    msg.field23 = R.readBits(3, false);
    msg.field24 = R.readBits(3, false);
    R.resetBits();
    msg.filler1 = R.read8();
    msg.field25 = R.readBits(2, false);
    msg.field26 = R.readBits(8, false);
    msg.field27 = R.readBits(2, false);
    msg.field28 = R.readBits(7, false);
    msg.field29 = R.readBits(2, false);
    msg.field30 = R.readBits(15, false);
    msg.field31 = R.readBits(4, false);
    msg.field32 = R.readBits(31, false);
    msg.field33 = R.readBits(4, false);
    msg.field34 = R.readBits(63, false);
    R.resetBits();
    return msg;
}
bitfield_t.decode = function(data)
{
    var R = createReader(data);
    var hash = R.readU64();
    if (!hash.eq(bitfield_t.__get_hash_recursive())) {
        console.error('Err: hash mismatch on bitfield_t.')
        console.error('Received:\n', hash)
        console.error('Expected:\n', bitfield_t.__get_hash_recursive());
        return null;
    }
    return bitfield_t_decode_one(R);
};
bitfield_t.IS_LITTLE_ENDIAN = false;
bitfield_t.FIELD22_TEST = 0xff;
bitfield_t.FIELD23_TEST = 3;
bitfield_t.FIELD24_TEST = 0x07;
bitfield_t.SIGN_TEST_0 = 0x0f;
bitfield_t.SIGN_TEST_1 = -16;
bitfield_t.SIGN_TEST_2 = 0x7f;
bitfield_t.SIGN_TEST_3 = -128;
bitfield_t.SIGN_TEST_4 = 0x1fff;
bitfield_t.SIGN_TEST_5 = -8192;
bitfield_t.SIGN_TEST_6 = 0x7fff;
bitfield_t.SIGN_TEST_7 = -32768;
bitfield_t.SIGN_TEST_8 = 0x01ffffff;
bitfield_t.SIGN_TEST_9 = -33554432;
bitfield_t.SIGN_TEST_10 = 0x7fffffff;
bitfield_t.SIGN_TEST_11 = -2147483648;
bitfield_t.SIGN_TEST_12 = bigint("-1").toString();
bitfield_t.SIGN_TEST_13 = bigint("00ffffffffffffff", 16).toString();
bitfield_t.SIGN_TEST_14 = bigint("-72057594037927936").toString();
bitfield_t.SIGN_TEST_15 = bigint("7fffffffffffffff", 16).toString();
bitfield_t.SIGN_TEST_16 = bigint("-9223372036854775808").toString();
bitfield_t.SIGN_TEST_17 = 0x07;
bitfield_t.SIGN_TEST_18 = 0x7f;
bitfield_t.SIGN_TEST_19 = 0x07;
bitfield_t.SIGN_TEST_20 = 0x7f;
bitfield_t.SIGN_TEST_21 = 0x0007;
bitfield_t.SIGN_TEST_22 = 0x7fff;
bitfield_t.SIGN_TEST_23 = 0x00000007;
bitfield_t.SIGN_TEST_24 = 0x7fffffff;
bitfield_t.SIGN_TEST_25 = bigint("0000000000000001", 16).toString();
bitfield_t.SIGN_TEST_26 = bigint("0000000000000007", 16).toString();
bitfield_t.SIGN_TEST_27 = bigint("7fffffffffffffff", 16).toString();
bitfield_t.SIGN_TEST_28 = 0x7f;
bitfield_t.SIGN_TEST_29 = 0xff;
bitfield_t.SIGN_TEST_30 = 0x7f;
bitfield_t.SIGN_TEST_31 = -1;
bitfield_t.SIGN_TEST_32 = 127;
bitfield_t.SIGN_TEST_33 = -1;
bitfield_t.SIGN_TEST_34 = 0x7fff;
bitfield_t.SIGN_TEST_35 = -1;
bitfield_t.SIGN_TEST_36 = 32767;
bitfield_t.SIGN_TEST_37 = -1;
bitfield_t.SIGN_TEST_38 = 0x7fffffff;
bitfield_t.SIGN_TEST_39 = -1;
bitfield_t.SIGN_TEST_40 = 2147483647;
bitfield_t.SIGN_TEST_41 = -1;
bitfield_t.SIGN_TEST_42 = bigint("7fffffffffffffff", 16).toString();
bitfield_t.SIGN_TEST_43 = bigint("-1").toString();
bitfield_t.SIGN_TEST_44 = bigint("9223372036854775807").toString();
bitfield_t.SIGN_TEST_45 = bigint("-1").toString();
exports.bitfield_t = bitfield_t;


/********************************************/
// demo_t
/********************************************/
function demo_t()
{
    this.timestamp = 0;
    this.name = "";

    this.IS_LITTLE_ENDIAN = false;

    this.__hash = demo_t.__get_hash_recursive().toString();
}
demo_t.__hash = null;
demo_t.__get_hash_recursive = function(parents)
{
    if (demo_t.__hash != null) return demo_t.__hash
    if (!parents) parents = [];
    if (parents.indexOf('demo_t') != -1) return 0;
    var tmphash = bigint('1865038443798186786').and(UINT64_MAX);

    demo_t.__hash = rotateLeftOne(tmphash);
    return demo_t.__hash;
};
demo_t.getEncodedSize = function(msg)
{
    return 8 + demo_t.getEncodedSizeNoHash(msg);
}
demo_t.getEncodedSizeNoHash = function(msg)
{
    var size = 0;
    size += 8; 	//timestamp
    size += msg.name.length + 4 + 1;
    return size;
};
demo_t_encode_one = function(msg, W)
{
    W.write64(msg.timestamp);
    W.writeString(msg.name);
}
demo_t.encode = function(msg)
{
    var size = demo_t.getEncodedSize(msg);
    var W = createWriter(size);
    W.writeU64(demo_t.__get_hash_recursive());
    demo_t_encode_one(msg, W);
    return W.getBuffer();
};
demo_t.prototype.encode = function()
{
    return demo_t.encode(this);
};
demo_t_decode_one = function(R)
{
    var msg = new demo_t();
    msg.timestamp = R.read64();
    msg.name = R.readString();
    return msg;
}
demo_t.decode = function(data)
{
    var R = createReader(data);
    var hash = R.readU64();
    if (!hash.eq(demo_t.__get_hash_recursive())) {
        console.error('Err: hash mismatch on demo_t.')
        console.error('Received:\n', hash)
        console.error('Expected:\n', demo_t.__get_hash_recursive());
        return null;
    }
    return demo_t_decode_one(R);
};
demo_t.IS_LITTLE_ENDIAN = false;
exports.demo_t = demo_t;


/********************************************/
// encoded_t
/********************************************/
function encoded_t()
{
    this.n = 0;
    this.msg = [];

    this.IS_LITTLE_ENDIAN = false;

    this.__hash = encoded_t.__get_hash_recursive().toString();
}
encoded_t.__hash = null;
encoded_t.__get_hash_recursive = function(parents)
{
    if (encoded_t.__hash != null) return encoded_t.__hash
    if (!parents) parents = [];
    if (parents.indexOf('encoded_t') != -1) return 0;
    var tmphash = bigint('14499461164337163958').and(UINT64_MAX);

    encoded_t.__hash = rotateLeftOne(tmphash);
    return encoded_t.__hash;
};
encoded_t.getEncodedSize = function(msg)
{
    return 8 + encoded_t.getEncodedSizeNoHash(msg);
}
encoded_t.getEncodedSizeNoHash = function(msg)
{
    var size = 0;
    size += 4; 	//n
    size += msg.n * 1; 	//msg
    return size;
};
encoded_t_encode_one = function(msg, W)
{
    W.write32(msg.n);
    W.writeArray(msg.msg, msg.n, W.writeU8);
}
encoded_t.encode = function(msg)
{
    var size = encoded_t.getEncodedSize(msg);
    var W = createWriter(size);
    W.writeU64(encoded_t.__get_hash_recursive());
    encoded_t_encode_one(msg, W);
    return W.getBuffer();
};
encoded_t.prototype.encode = function()
{
    return encoded_t.encode(this);
};
encoded_t_decode_one = function(R)
{
    var msg = new encoded_t();
    msg.n = R.read32();
    msg.msg = R.readArray(msg.n, () => { return R.readU8(); })
    return msg;
}
encoded_t.decode = function(data)
{
    var R = createReader(data);
    var hash = R.readU64();
    if (!hash.eq(encoded_t.__get_hash_recursive())) {
        console.error('Err: hash mismatch on encoded_t.')
        console.error('Received:\n', hash)
        console.error('Expected:\n', encoded_t.__get_hash_recursive());
        return null;
    }
    return encoded_t_decode_one(R);
};
encoded_t.IS_LITTLE_ENDIAN = false;
exports.encoded_t = encoded_t;


/********************************************/
// example2_t
/********************************************/
function example2_t()
{
    this.timestamp2 = 0;
    this.position2 = new Array(3).fill(0.0);
    this.orientation2 = new Array(4).fill(0.0);
    this.num_ranges2 = 0;
    this.ranges2 = [];
    this.name2 = "";
    this.enabled2 = false;

    this.IS_LITTLE_ENDIAN = false;

    this.__hash = example2_t.__get_hash_recursive().toString();
}
example2_t.__hash = null;
example2_t.__get_hash_recursive = function(parents)
{
    if (example2_t.__hash != null) return example2_t.__hash
    if (!parents) parents = [];
    if (parents.indexOf('example2_t') != -1) return 0;
    var tmphash = bigint('3218406425606450839').and(UINT64_MAX);

    example2_t.__hash = rotateLeftOne(tmphash);
    return example2_t.__hash;
};
example2_t.getEncodedSize = function(msg)
{
    return 8 + example2_t.getEncodedSizeNoHash(msg);
}
example2_t.getEncodedSizeNoHash = function(msg)
{
    var size = 0;
    size += 8; 	//timestamp2
    size += 3 * 8; 	//position2
    size += 4 * 8; 	//orientation2
    size += 4; 	//num_ranges2
    size += msg.num_ranges2 * 2; 	//ranges2
    size += msg.name2.length + 4 + 1;
    size += 1; 	//enabled2
    return size;
};
example2_t_encode_one = function(msg, W)
{
    W.write64(msg.timestamp2);
    W.writeArray(msg.position2, 3, W.writeDouble);
    W.writeArray(msg.orientation2, 4, W.writeDouble);
    W.write32(msg.num_ranges2);
    W.writeArray(msg.ranges2, msg.num_ranges2, W.write16);
    W.writeString(msg.name2);
    W.writeBoolean(msg.enabled2);
}
example2_t.encode = function(msg)
{
    var size = example2_t.getEncodedSize(msg);
    var W = createWriter(size);
    W.writeU64(example2_t.__get_hash_recursive());
    example2_t_encode_one(msg, W);
    return W.getBuffer();
};
example2_t.prototype.encode = function()
{
    return example2_t.encode(this);
};
example2_t_decode_one = function(R)
{
    var msg = new example2_t();
    msg.timestamp2 = R.read64();
    msg.position2 = R.readArray(3, () => { return R.readDouble(); })
    msg.orientation2 = R.readArray(4, () => { return R.readDouble(); })
    msg.num_ranges2 = R.read32();
    msg.ranges2 = R.readArray(msg.num_ranges2, () => { return R.read16(); })
    msg.name2 = R.readString();
    msg.enabled2 = R.readBoolean();
    return msg;
}
example2_t.decode = function(data)
{
    var R = createReader(data);
    var hash = R.readU64();
    if (!hash.eq(example2_t.__get_hash_recursive())) {
        console.error('Err: hash mismatch on example2_t.')
        console.error('Received:\n', hash)
        console.error('Expected:\n', example2_t.__get_hash_recursive());
        return null;
    }
    return example2_t_decode_one(R);
};
example2_t.IS_LITTLE_ENDIAN = false;
exports.example2_t = example2_t;


/********************************************/
// example3_t
/********************************************/
function example3_t()
{
    this.arr = new Array(10).fill(0);

    this.IS_LITTLE_ENDIAN = false;
    this.arrsize = 10;

    this.__hash = example3_t.__get_hash_recursive().toString();
}
example3_t.__hash = null;
example3_t.__get_hash_recursive = function(parents)
{
    if (example3_t.__hash != null) return example3_t.__hash
    if (!parents) parents = [];
    if (parents.indexOf('example3_t') != -1) return 0;
    var tmphash = bigint('4416837808639134699').and(UINT64_MAX);

    example3_t.__hash = rotateLeftOne(tmphash);
    return example3_t.__hash;
};
example3_t.getEncodedSize = function(msg)
{
    return 8 + example3_t.getEncodedSizeNoHash(msg);
}
example3_t.getEncodedSizeNoHash = function(msg)
{
    var size = 0;
    size += 10 * 4; 	//arr
    return size;
};
example3_t_encode_one = function(msg, W)
{
    W.writeArray(msg.arr, 10, W.write32);
}
example3_t.encode = function(msg)
{
    var size = example3_t.getEncodedSize(msg);
    var W = createWriter(size);
    W.writeU64(example3_t.__get_hash_recursive());
    example3_t_encode_one(msg, W);
    return W.getBuffer();
};
example3_t.prototype.encode = function()
{
    return example3_t.encode(this);
};
example3_t_decode_one = function(R)
{
    var msg = new example3_t();
    msg.arr = R.readArray(10, () => { return R.read32(); })
    return msg;
}
example3_t.decode = function(data)
{
    var R = createReader(data);
    var hash = R.readU64();
    if (!hash.eq(example3_t.__get_hash_recursive())) {
        console.error('Err: hash mismatch on example3_t.')
        console.error('Received:\n', hash)
        console.error('Expected:\n', example3_t.__get_hash_recursive());
        return null;
    }
    return example3_t_decode_one(R);
};
example3_t.IS_LITTLE_ENDIAN = false;
example3_t.arrsize = 10;
exports.example3_t = example3_t;


/********************************************/
// example4_t
/********************************************/
function example4_t()
{
    this.timestamp = 0;
    this.p = new test_package_example3_t();

    this.IS_LITTLE_ENDIAN = false;

    this.__hash = example4_t.__get_hash_recursive().toString();
}
example4_t.__hash = null;
example4_t.__get_hash_recursive = function(parents)
{
    if (example4_t.__hash != null) return example4_t.__hash
    if (!parents) parents = [];
    if (parents.indexOf('example4_t') != -1) return 0;
    newparents = parents.slice(0, parents.length);
    newparents.push('example4_t')
    var tmphash = bigint('4990517006135290649').add(test_package_example3_t.__get_hash_recursive(newparents)).and(UINT64_MAX);

    example4_t.__hash = rotateLeftOne(tmphash);
    return example4_t.__hash;
};
example4_t.getEncodedSize = function(msg)
{
    return 8 + example4_t.getEncodedSizeNoHash(msg);
}
example4_t.getEncodedSizeNoHash = function(msg)
{
    var size = 0;
    size += 8; 	//timestamp
    size += test_package_example3_t.getEncodedSizeNoHash(msg.p);
    return size;
};
example4_t_encode_one = function(msg, W)
{
    W.write64(msg.timestamp);
    test_package_example3_t_encode_one(msg.p, W)
}
example4_t.encode = function(msg)
{
    var size = example4_t.getEncodedSize(msg);
    var W = createWriter(size);
    W.writeU64(example4_t.__get_hash_recursive());
    example4_t_encode_one(msg, W);
    return W.getBuffer();
};
example4_t.prototype.encode = function()
{
    return example4_t.encode(this);
};
example4_t_decode_one = function(R)
{
    var msg = new example4_t();
    msg.timestamp = R.read64();
    msg.p = test_package_example3_t_decode_one(R)
    return msg;
}
example4_t.decode = function(data)
{
    var R = createReader(data);
    var hash = R.readU64();
    if (!hash.eq(example4_t.__get_hash_recursive())) {
        console.error('Err: hash mismatch on example4_t.')
        console.error('Received:\n', hash)
        console.error('Expected:\n', example4_t.__get_hash_recursive());
        return null;
    }
    return example4_t_decode_one(R);
};
example4_t.IS_LITTLE_ENDIAN = false;
exports.example4_t = example4_t;


/********************************************/
// example_t
/********************************************/
function example_t()
{
    this.timestamp = 0;
    this.position = new Array(3).fill(0.0);
    this.orientation = new Array(4).fill(0.0);
    this.num_ranges = 0;
    this.ranges = [];
    this.name = "";
    this.enabled = false;
    this.nExamples1 = 0;
    this.nExamples2 = 0;
    this.subExamples = [];
    this.subStrings = [];
    this.bitfield1 = 0;
    this.bitfield2 = new Array(4).fill(0);

    this.IS_LITTLE_ENDIAN = false;
    this.test_const_8_max_hex = -1;
    this.test_const_16_max_hex = -1;
    this.test_const_32_max_hex = -1;
    this.test_const_64_max_hex = bigint("-1").toString();
    this.test_const_float = 1e-20;
    this.test_const_double = 12.1e200;
    this.test_const_string = "example";

    this.__hash = example_t.__get_hash_recursive().toString();
}
example_t.__hash = null;
example_t.__get_hash_recursive = function(parents)
{
    if (example_t.__hash != null) return example_t.__hash
    if (!parents) parents = [];
    if (parents.indexOf('example_t') != -1) return 0;
    newparents = parents.slice(0, parents.length);
    newparents.push('example_t')
    var tmphash = bigint('1817753103186318072').add(example_t.__get_hash_recursive(newparents)).and(UINT64_MAX);

    example_t.__hash = rotateLeftOne(tmphash);
    return example_t.__hash;
};
example_t.getEncodedSize = function(msg)
{
    return 8 + example_t.getEncodedSizeNoHash(msg);
}
example_t.getEncodedSizeNoHash = function(msg)
{
    var size = 0;
    size += 8; 	//timestamp
    size += 3 * 8; 	//position
    size += 4 * 8; 	//orientation
    size += 4; 	//num_ranges
    size += msg.num_ranges * 2; 	//ranges
    size += msg.name.length + 4 + 1;
    size += 1; 	//enabled
    size += 4; 	//nExamples1
    size += 4; 	//nExamples2
    for (var a0 = 0; a0 < msg.nExamples1; ++a0) {
        for (var a1 = 0; a1 < msg.nExamples2; ++a1) {
            size += example_t.getEncodedSizeNoHash(msg.subExamples[a0][a1]);
        }
    }
    for (var a0 = 0; a0 < msg.nExamples1; ++a0) {
        for (var a1 = 0; a1 < msg.nExamples2; ++a1) {
            size += msg.subStrings[a0][a1].length + 4 + 1;
        }
    }
    size += 1; 	//bitfield1
    size += 4 * 1; 	//bitfield2
    return size;
};
example_t_encode_one = function(msg, W)
{
    W.write64(msg.timestamp);
    W.writeArray(msg.position, 3, W.writeDouble);
    W.writeArray(msg.orientation, 4, W.writeDouble);
    W.write32(msg.num_ranges);
    W.writeArray(msg.ranges, msg.num_ranges, W.write16);
    W.writeString(msg.name);
    W.writeBoolean(msg.enabled);
    W.write32(msg.nExamples1);
    W.write32(msg.nExamples2);
    for (var i0 = 0; i0 < msg.nExamples1; ++i0) {
        for (var i1 = 0; i1 < msg.nExamples2; ++i1) {
            example_t_encode_one(msg.subExamples[i0][i1], W)
        }
    }
    for (var i0 = 0; i0 < msg.nExamples1; ++i0) {
        W.writeArray(msg.subStrings[i0], msg.nExamples2, W.writeString);
    }
    W.writeBits(msg.bitfield1, 2);
    W.writeArray(msg.bitfield2, 4, (f) => { return W.writeBits(f, 3); });
    W.resetBits();
}
example_t.encode = function(msg)
{
    var size = example_t.getEncodedSize(msg);
    var W = createWriter(size);
    W.writeU64(example_t.__get_hash_recursive());
    example_t_encode_one(msg, W);
    return W.getBuffer();
};
example_t.prototype.encode = function()
{
    return example_t.encode(this);
};
example_t_decode_one = function(R)
{
    var msg = new example_t();
    msg.timestamp = R.read64();
    msg.position = R.readArray(3, () => { return R.readDouble(); })
    msg.orientation = R.readArray(4, () => { return R.readDouble(); })
    msg.num_ranges = R.read32();
    msg.ranges = R.readArray(msg.num_ranges, () => { return R.read16(); })
    msg.name = R.readString();
    msg.enabled = R.readBoolean();
    msg.nExamples1 = R.read32();
    msg.nExamples2 = R.read32();
    msg.subExamples = []
    for (var i0 = 0; i0 < msg.nExamples1; ++i0) {
        msg.subExamples.push([]);
        for (var i1 = 0; i1 < msg.nExamples2; ++i1) {
            msg.subExamples[i0].push(example_t_decode_one(R))
        }
    }
    msg.subStrings = []
    for (var i0 = 0; i0 < msg.nExamples1; ++i0) {
        msg.subStrings.push(R.readArray(msg.nExamples2, () => { return R.readString(); }))
    }
    msg.bitfield1 = R.readBits(2, false);
    msg.bitfield2 = R.readArray(4, () => { return R.readBits(3, false); })
    R.resetBits();
    return msg;
}
example_t.decode = function(data)
{
    var R = createReader(data);
    var hash = R.readU64();
    if (!hash.eq(example_t.__get_hash_recursive())) {
        console.error('Err: hash mismatch on example_t.')
        console.error('Received:\n', hash)
        console.error('Expected:\n', example_t.__get_hash_recursive());
        return null;
    }
    return example_t_decode_one(R);
};
example_t.IS_LITTLE_ENDIAN = false;
example_t.test_const_8_max_hex = -1;
example_t.test_const_16_max_hex = -1;
example_t.test_const_32_max_hex = -1;
example_t.test_const_64_max_hex = bigint("-1").toString();
example_t.test_const_float = 1e-20;
example_t.test_const_double = 12.1e200;
example_t.test_const_string = "example";
exports.example_t = example_t;


/********************************************/
// multidim_t
/********************************************/
function multidim_t()
{
    this.rows = 0;
    this.jk = 0;
    this.mat = [];

    this.IS_LITTLE_ENDIAN = false;

    this.__hash = multidim_t.__get_hash_recursive().toString();
}
multidim_t.__hash = null;
multidim_t.__get_hash_recursive = function(parents)
{
    if (multidim_t.__hash != null) return multidim_t.__hash
    if (!parents) parents = [];
    if (parents.indexOf('multidim_t') != -1) return 0;
    var tmphash = bigint('16451877846552949777').and(UINT64_MAX);

    multidim_t.__hash = rotateLeftOne(tmphash);
    return multidim_t.__hash;
};
multidim_t.getEncodedSize = function(msg)
{
    return 8 + multidim_t.getEncodedSizeNoHash(msg);
}
multidim_t.getEncodedSizeNoHash = function(msg)
{
    var size = 0;
    size += 1; 	//rows
    size += 4; 	//jk
    size += msg.rows * 2 * msg.jk * 8; 	//mat
    return size;
};
multidim_t_encode_one = function(msg, W)
{
    W.write8(msg.rows);
    W.write32(msg.jk);
    for (var i0 = 0; i0 < msg.rows; ++i0) {
        for (var i1 = 0; i1 < 2; ++i1) {
            W.writeArray(msg.mat[i0][i1], msg.jk, W.writeDouble);
        }
    }
}
multidim_t.encode = function(msg)
{
    var size = multidim_t.getEncodedSize(msg);
    var W = createWriter(size);
    W.writeU64(multidim_t.__get_hash_recursive());
    multidim_t_encode_one(msg, W);
    return W.getBuffer();
};
multidim_t.prototype.encode = function()
{
    return multidim_t.encode(this);
};
multidim_t_decode_one = function(R)
{
    var msg = new multidim_t();
    msg.rows = R.read8();
    msg.jk = R.read32();
    msg.mat = []
    for (var i0 = 0; i0 < msg.rows; ++i0) {
        msg.mat.push([])
        for (var i1 = 0; i1 < 2; ++i1) {
            msg.mat[i0].push(R.readArray(msg.jk, () => { return R.readDouble(); }))
        }
    }
    return msg;
}
multidim_t.decode = function(data)
{
    var R = createReader(data);
    var hash = R.readU64();
    if (!hash.eq(multidim_t.__get_hash_recursive())) {
        console.error('Err: hash mismatch on multidim_t.')
        console.error('Received:\n', hash)
        console.error('Expected:\n', multidim_t.__get_hash_recursive());
        return null;
    }
    return multidim_t_decode_one(R);
};
multidim_t.IS_LITTLE_ENDIAN = false;
exports.multidim_t = multidim_t;


/********************************************/
// test_package_packaged2_t
/********************************************/
function test_package_packaged2_t()
{
    this.packaged = false;
    this.e = new example4_t();

    this.IS_LITTLE_ENDIAN = false;

    this.__hash = test_package_packaged2_t.__get_hash_recursive().toString();
}
test_package_packaged2_t.__hash = null;
test_package_packaged2_t.__get_hash_recursive = function(parents)
{
    if (test_package_packaged2_t.__hash != null) return test_package_packaged2_t.__hash
    if (!parents) parents = [];
    if (parents.indexOf('test_package.packaged2_t') != -1) return 0;
    newparents = parents.slice(0, parents.length);
    newparents.push('test_package.packaged2_t')
    var tmphash = bigint('5123515878010604953').add(example4_t.__get_hash_recursive(newparents)).and(UINT64_MAX);

    test_package_packaged2_t.__hash = rotateLeftOne(tmphash);
    return test_package_packaged2_t.__hash;
};
test_package_packaged2_t.getEncodedSize = function(msg)
{
    return 8 + test_package_packaged2_t.getEncodedSizeNoHash(msg);
}
test_package_packaged2_t.getEncodedSizeNoHash = function(msg)
{
    var size = 0;
    size += 1; 	//packaged
    size += example4_t.getEncodedSizeNoHash(msg.e);
    return size;
};
test_package_packaged2_t_encode_one = function(msg, W)
{
    W.writeBoolean(msg.packaged);
    example4_t_encode_one(msg.e, W)
}
test_package_packaged2_t.encode = function(msg)
{
    var size = test_package_packaged2_t.getEncodedSize(msg);
    var W = createWriter(size);
    W.writeU64(test_package_packaged2_t.__get_hash_recursive());
    test_package_packaged2_t_encode_one(msg, W);
    return W.getBuffer();
};
test_package_packaged2_t.prototype.encode = function()
{
    return test_package_packaged2_t.encode(this);
};
test_package_packaged2_t_decode_one = function(R)
{
    var msg = new test_package_packaged2_t();
    msg.packaged = R.readBoolean();
    msg.e = example4_t_decode_one(R)
    return msg;
}
test_package_packaged2_t.decode = function(data)
{
    var R = createReader(data);
    var hash = R.readU64();
    if (!hash.eq(test_package_packaged2_t.__get_hash_recursive())) {
        console.error('Err: hash mismatch on test_package_packaged2_t.')
        console.error('Received:\n', hash)
        console.error('Expected:\n', test_package_packaged2_t.__get_hash_recursive());
        return null;
    }
    return test_package_packaged2_t_decode_one(R);
};
test_package_packaged2_t.IS_LITTLE_ENDIAN = false;
exports.test_package.packaged2_t = test_package_packaged2_t;


/********************************************/
// test_package_packaged_t
/********************************************/
function test_package_packaged_t()
{
    this.packaged = false;
    this.a = new test_package_packaged2_t();

    this.IS_LITTLE_ENDIAN = false;

    this.__hash = test_package_packaged_t.__get_hash_recursive().toString();
}
test_package_packaged_t.__hash = null;
test_package_packaged_t.__get_hash_recursive = function(parents)
{
    if (test_package_packaged_t.__hash != null) return test_package_packaged_t.__hash
    if (!parents) parents = [];
    if (parents.indexOf('test_package.packaged_t') != -1) return 0;
    newparents = parents.slice(0, parents.length);
    newparents.push('test_package.packaged_t')
    var tmphash = bigint('2758198963006563075').add(test_package_packaged2_t.__get_hash_recursive(newparents)).and(UINT64_MAX);

    test_package_packaged_t.__hash = rotateLeftOne(tmphash);
    return test_package_packaged_t.__hash;
};
test_package_packaged_t.getEncodedSize = function(msg)
{
    return 8 + test_package_packaged_t.getEncodedSizeNoHash(msg);
}
test_package_packaged_t.getEncodedSizeNoHash = function(msg)
{
    var size = 0;
    size += 1; 	//packaged
    size += test_package_packaged2_t.getEncodedSizeNoHash(msg.a);
    return size;
};
test_package_packaged_t_encode_one = function(msg, W)
{
    W.writeBoolean(msg.packaged);
    test_package_packaged2_t_encode_one(msg.a, W)
}
test_package_packaged_t.encode = function(msg)
{
    var size = test_package_packaged_t.getEncodedSize(msg);
    var W = createWriter(size);
    W.writeU64(test_package_packaged_t.__get_hash_recursive());
    test_package_packaged_t_encode_one(msg, W);
    return W.getBuffer();
};
test_package_packaged_t.prototype.encode = function()
{
    return test_package_packaged_t.encode(this);
};
test_package_packaged_t_decode_one = function(R)
{
    var msg = new test_package_packaged_t();
    msg.packaged = R.readBoolean();
    msg.a = test_package_packaged2_t_decode_one(R)
    return msg;
}
test_package_packaged_t.decode = function(data)
{
    var R = createReader(data);
    var hash = R.readU64();
    if (!hash.eq(test_package_packaged_t.__get_hash_recursive())) {
        console.error('Err: hash mismatch on test_package_packaged_t.')
        console.error('Received:\n', hash)
        console.error('Expected:\n', test_package_packaged_t.__get_hash_recursive());
        return null;
    }
    return test_package_packaged_t_decode_one(R);
};
test_package_packaged_t.IS_LITTLE_ENDIAN = false;
exports.test_package.packaged_t = test_package_packaged_t;


/********************************************/
// recursive_t
/********************************************/
function recursive_t()
{
    this.e = new example_t();

    this.IS_LITTLE_ENDIAN = false;

    this.__hash = recursive_t.__get_hash_recursive().toString();
}
recursive_t.__hash = null;
recursive_t.__get_hash_recursive = function(parents)
{
    if (recursive_t.__hash != null) return recursive_t.__hash
    if (!parents) parents = [];
    if (parents.indexOf('recursive_t') != -1) return 0;
    newparents = parents.slice(0, parents.length);
    newparents.push('recursive_t')
    var tmphash = bigint('2657025316779050035').add(example_t.__get_hash_recursive(newparents)).and(UINT64_MAX);

    recursive_t.__hash = rotateLeftOne(tmphash);
    return recursive_t.__hash;
};
recursive_t.getEncodedSize = function(msg)
{
    return 8 + recursive_t.getEncodedSizeNoHash(msg);
}
recursive_t.getEncodedSizeNoHash = function(msg)
{
    var size = 0;
    size += example_t.getEncodedSizeNoHash(msg.e);
    return size;
};
recursive_t_encode_one = function(msg, W)
{
    example_t_encode_one(msg.e, W)
}
recursive_t.encode = function(msg)
{
    var size = recursive_t.getEncodedSize(msg);
    var W = createWriter(size);
    W.writeU64(recursive_t.__get_hash_recursive());
    recursive_t_encode_one(msg, W);
    return W.getBuffer();
};
recursive_t.prototype.encode = function()
{
    return recursive_t.encode(this);
};
recursive_t_decode_one = function(R)
{
    var msg = new recursive_t();
    msg.e = example_t_decode_one(R)
    return msg;
}
recursive_t.decode = function(data)
{
    var R = createReader(data);
    var hash = R.readU64();
    if (!hash.eq(recursive_t.__get_hash_recursive())) {
        console.error('Err: hash mismatch on recursive_t.')
        console.error('Received:\n', hash)
        console.error('Expected:\n', recursive_t.__get_hash_recursive());
        return null;
    }
    return recursive_t_decode_one(R);
};
recursive_t.IS_LITTLE_ENDIAN = false;
exports.recursive_t = recursive_t;


/********************************************/
// foo_t1
/********************************************/
function foo_t1()
{
    this.x = new foo_t2();

    this.IS_LITTLE_ENDIAN = false;

    this.__hash = foo_t1.__get_hash_recursive().toString();
}
foo_t1.__hash = null;
foo_t1.__get_hash_recursive = function(parents)
{
    if (foo_t1.__hash != null) return foo_t1.__hash
    if (!parents) parents = [];
    if (parents.indexOf('foo.t1') != -1) return 0;
    newparents = parents.slice(0, parents.length);
    newparents.push('foo.t1')
    var tmphash = bigint('1311768464908890368').add(foo_t2.__get_hash_recursive(newparents)).and(UINT64_MAX);

    foo_t1.__hash = rotateLeftOne(tmphash);
    return foo_t1.__hash;
};
foo_t1.getEncodedSize = function(msg)
{
    return 8 + foo_t1.getEncodedSizeNoHash(msg);
}
foo_t1.getEncodedSizeNoHash = function(msg)
{
    var size = 0;
    size += foo_t2.getEncodedSizeNoHash(msg.x);
    return size;
};
foo_t1_encode_one = function(msg, W)
{
    foo_t2_encode_one(msg.x, W)
}
foo_t1.encode = function(msg)
{
    var size = foo_t1.getEncodedSize(msg);
    var W = createWriter(size);
    W.writeU64(foo_t1.__get_hash_recursive());
    foo_t1_encode_one(msg, W);
    return W.getBuffer();
};
foo_t1.prototype.encode = function()
{
    return foo_t1.encode(this);
};
foo_t1_decode_one = function(R)
{
    var msg = new foo_t1();
    msg.x = foo_t2_decode_one(R)
    return msg;
}
foo_t1.decode = function(data)
{
    var R = createReader(data);
    var hash = R.readU64();
    if (!hash.eq(foo_t1.__get_hash_recursive())) {
        console.error('Err: hash mismatch on foo_t1.')
        console.error('Received:\n', hash)
        console.error('Expected:\n', foo_t1.__get_hash_recursive());
        return null;
    }
    return foo_t1_decode_one(R);
};
foo_t1.IS_LITTLE_ENDIAN = false;
exports.foo.t1 = foo_t1;


/********************************************/
// foo_t2
/********************************************/
function foo_t2()
{
    this.x = 0;
    this.y = new foo_bar_t3();

    this.IS_LITTLE_ENDIAN = false;

    this.__hash = foo_t2.__get_hash_recursive().toString();
}
foo_t2.__hash = null;
foo_t2.__get_hash_recursive = function(parents)
{
    if (foo_t2.__hash != null) return foo_t2.__hash
    if (!parents) parents = [];
    if (parents.indexOf('foo.t2') != -1) return 0;
    newparents = parents.slice(0, parents.length);
    newparents.push('foo.t2')
    var tmphash = bigint('2945030653863260187').add(foo_bar_t3.__get_hash_recursive(newparents)).and(UINT64_MAX);

    foo_t2.__hash = rotateLeftOne(tmphash);
    return foo_t2.__hash;
};
foo_t2.getEncodedSize = function(msg)
{
    return 8 + foo_t2.getEncodedSizeNoHash(msg);
}
foo_t2.getEncodedSizeNoHash = function(msg)
{
    var size = 0;
    size += 8; 	//x
    size += foo_bar_t3.getEncodedSizeNoHash(msg.y);
    return size;
};
foo_t2_encode_one = function(msg, W)
{
    W.write64(msg.x);
    foo_bar_t3_encode_one(msg.y, W)
}
foo_t2.encode = function(msg)
{
    var size = foo_t2.getEncodedSize(msg);
    var W = createWriter(size);
    W.writeU64(foo_t2.__get_hash_recursive());
    foo_t2_encode_one(msg, W);
    return W.getBuffer();
};
foo_t2.prototype.encode = function()
{
    return foo_t2.encode(this);
};
foo_t2_decode_one = function(R)
{
    var msg = new foo_t2();
    msg.x = R.read64();
    msg.y = foo_bar_t3_decode_one(R)
    return msg;
}
foo_t2.decode = function(data)
{
    var R = createReader(data);
    var hash = R.readU64();
    if (!hash.eq(foo_t2.__get_hash_recursive())) {
        console.error('Err: hash mismatch on foo_t2.')
        console.error('Received:\n', hash)
        console.error('Expected:\n', foo_t2.__get_hash_recursive());
        return null;
    }
    return foo_t2_decode_one(R);
};
foo_t2.IS_LITTLE_ENDIAN = false;
exports.foo.t2 = foo_t2;


/********************************************/
// foo_bar_t3
/********************************************/
function foo_bar_t3()
{
    this.x = new unpackaged_t();

    this.IS_LITTLE_ENDIAN = false;

    this.__hash = foo_bar_t3.__get_hash_recursive().toString();
}
foo_bar_t3.__hash = null;
foo_bar_t3.__get_hash_recursive = function(parents)
{
    if (foo_bar_t3.__hash != null) return foo_bar_t3.__hash
    if (!parents) parents = [];
    if (parents.indexOf('foo.bar.t3') != -1) return 0;
    newparents = parents.slice(0, parents.length);
    newparents.push('foo.bar.t3')
    var tmphash = bigint('1311768464908890880').add(unpackaged_t.__get_hash_recursive(newparents)).and(UINT64_MAX);

    foo_bar_t3.__hash = rotateLeftOne(tmphash);
    return foo_bar_t3.__hash;
};
foo_bar_t3.getEncodedSize = function(msg)
{
    return 8 + foo_bar_t3.getEncodedSizeNoHash(msg);
}
foo_bar_t3.getEncodedSizeNoHash = function(msg)
{
    var size = 0;
    size += unpackaged_t.getEncodedSizeNoHash(msg.x);
    return size;
};
foo_bar_t3_encode_one = function(msg, W)
{
    unpackaged_t_encode_one(msg.x, W)
}
foo_bar_t3.encode = function(msg)
{
    var size = foo_bar_t3.getEncodedSize(msg);
    var W = createWriter(size);
    W.writeU64(foo_bar_t3.__get_hash_recursive());
    foo_bar_t3_encode_one(msg, W);
    return W.getBuffer();
};
foo_bar_t3.prototype.encode = function()
{
    return foo_bar_t3.encode(this);
};
foo_bar_t3_decode_one = function(R)
{
    var msg = new foo_bar_t3();
    msg.x = unpackaged_t_decode_one(R)
    return msg;
}
foo_bar_t3.decode = function(data)
{
    var R = createReader(data);
    var hash = R.readU64();
    if (!hash.eq(foo_bar_t3.__get_hash_recursive())) {
        console.error('Err: hash mismatch on foo_bar_t3.')
        console.error('Received:\n', hash)
        console.error('Expected:\n', foo_bar_t3.__get_hash_recursive());
        return null;
    }
    return foo_bar_t3_decode_one(R);
};
foo_bar_t3.IS_LITTLE_ENDIAN = false;
exports.foo.bar.t3 = foo_bar_t3;


/********************************************/
// bar_t4
/********************************************/
function bar_t4()
{
    this.x = new foo_t2();

    this.IS_LITTLE_ENDIAN = false;

    this.__hash = bar_t4.__get_hash_recursive().toString();
}
bar_t4.__hash = null;
bar_t4.__get_hash_recursive = function(parents)
{
    if (bar_t4.__hash != null) return bar_t4.__hash
    if (!parents) parents = [];
    if (parents.indexOf('bar.t4') != -1) return 0;
    newparents = parents.slice(0, parents.length);
    newparents.push('bar.t4')
    var tmphash = bigint('1311768464908891136').add(foo_t2.__get_hash_recursive(newparents)).and(UINT64_MAX);

    bar_t4.__hash = rotateLeftOne(tmphash);
    return bar_t4.__hash;
};
bar_t4.getEncodedSize = function(msg)
{
    return 8 + bar_t4.getEncodedSizeNoHash(msg);
}
bar_t4.getEncodedSizeNoHash = function(msg)
{
    var size = 0;
    size += foo_t2.getEncodedSizeNoHash(msg.x);
    return size;
};
bar_t4_encode_one = function(msg, W)
{
    foo_t2_encode_one(msg.x, W)
}
bar_t4.encode = function(msg)
{
    var size = bar_t4.getEncodedSize(msg);
    var W = createWriter(size);
    W.writeU64(bar_t4.__get_hash_recursive());
    bar_t4_encode_one(msg, W);
    return W.getBuffer();
};
bar_t4.prototype.encode = function()
{
    return bar_t4.encode(this);
};
bar_t4_decode_one = function(R)
{
    var msg = new bar_t4();
    msg.x = foo_t2_decode_one(R)
    return msg;
}
bar_t4.decode = function(data)
{
    var R = createReader(data);
    var hash = R.readU64();
    if (!hash.eq(bar_t4.__get_hash_recursive())) {
        console.error('Err: hash mismatch on bar_t4.')
        console.error('Received:\n', hash)
        console.error('Expected:\n', bar_t4.__get_hash_recursive());
        return null;
    }
    return bar_t4_decode_one(R);
};
bar_t4.IS_LITTLE_ENDIAN = false;
exports.bar.t4 = bar_t4;


/********************************************/
// test_package_example3_t
/********************************************/
function test_package_example3_t()
{
    this.packaged = false;

    this.IS_LITTLE_ENDIAN = false;

    this.__hash = test_package_example3_t.__get_hash_recursive().toString();
}
test_package_example3_t.__hash = null;
test_package_example3_t.__get_hash_recursive = function(parents)
{
    if (test_package_example3_t.__hash != null) return test_package_example3_t.__hash
    if (!parents) parents = [];
    if (parents.indexOf('test_package.example3_t') != -1) return 0;
    var tmphash = bigint('9636510133845084308').and(UINT64_MAX);

    test_package_example3_t.__hash = rotateLeftOne(tmphash);
    return test_package_example3_t.__hash;
};
test_package_example3_t.getEncodedSize = function(msg)
{
    return 8 + test_package_example3_t.getEncodedSizeNoHash(msg);
}
test_package_example3_t.getEncodedSizeNoHash = function(msg)
{
    var size = 0;
    size += 1; 	//packaged
    return size;
};
test_package_example3_t_encode_one = function(msg, W)
{
    W.writeBoolean(msg.packaged);
}
test_package_example3_t.encode = function(msg)
{
    var size = test_package_example3_t.getEncodedSize(msg);
    var W = createWriter(size);
    W.writeU64(test_package_example3_t.__get_hash_recursive());
    test_package_example3_t_encode_one(msg, W);
    return W.getBuffer();
};
test_package_example3_t.prototype.encode = function()
{
    return test_package_example3_t.encode(this);
};
test_package_example3_t_decode_one = function(R)
{
    var msg = new test_package_example3_t();
    msg.packaged = R.readBoolean();
    return msg;
}
test_package_example3_t.decode = function(data)
{
    var R = createReader(data);
    var hash = R.readU64();
    if (!hash.eq(test_package_example3_t.__get_hash_recursive())) {
        console.error('Err: hash mismatch on test_package_example3_t.')
        console.error('Received:\n', hash)
        console.error('Expected:\n', test_package_example3_t.__get_hash_recursive());
        return null;
    }
    return test_package_example3_t_decode_one(R);
};
test_package_example3_t.IS_LITTLE_ENDIAN = false;
exports.test_package.example3_t = test_package_example3_t;


/********************************************/
// unpackaged_t
/********************************************/
function unpackaged_t()
{
    this.x = 0;

    this.IS_LITTLE_ENDIAN = false;

    this.__hash = unpackaged_t.__get_hash_recursive().toString();
}
unpackaged_t.__hash = null;
unpackaged_t.__get_hash_recursive = function(parents)
{
    if (unpackaged_t.__hash != null) return unpackaged_t.__hash
    if (!parents) parents = [];
    if (parents.indexOf('unpackaged_t') != -1) return 0;
    var tmphash = bigint('14334522663809021403').and(UINT64_MAX);

    unpackaged_t.__hash = rotateLeftOne(tmphash);
    return unpackaged_t.__hash;
};
unpackaged_t.getEncodedSize = function(msg)
{
    return 8 + unpackaged_t.getEncodedSizeNoHash(msg);
}
unpackaged_t.getEncodedSizeNoHash = function(msg)
{
    var size = 0;
    size += 8; 	//x
    return size;
};
unpackaged_t_encode_one = function(msg, W)
{
    W.write64(msg.x);
}
unpackaged_t.encode = function(msg)
{
    var size = unpackaged_t.getEncodedSize(msg);
    var W = createWriter(size);
    W.writeU64(unpackaged_t.__get_hash_recursive());
    unpackaged_t_encode_one(msg, W);
    return W.getBuffer();
};
unpackaged_t.prototype.encode = function()
{
    return unpackaged_t.encode(this);
};
unpackaged_t_decode_one = function(R)
{
    var msg = new unpackaged_t();
    msg.x = R.read64();
    return msg;
}
unpackaged_t.decode = function(data)
{
    var R = createReader(data);
    var hash = R.readU64();
    if (!hash.eq(unpackaged_t.__get_hash_recursive())) {
        console.error('Err: hash mismatch on unpackaged_t.')
        console.error('Received:\n', hash)
        console.error('Expected:\n', unpackaged_t.__get_hash_recursive());
        return null;
    }
    return unpackaged_t_decode_one(R);
};
unpackaged_t.IS_LITTLE_ENDIAN = false;
exports.unpackaged_t = unpackaged_t;


exports.getZcmtypes = function()
{
    return {
        'arrays_t' : new exports.arrays_t(),
        'bitfield_t' : new exports.bitfield_t(),
        'demo_t' : new exports.demo_t(),
        'encoded_t' : new exports.encoded_t(),
        'example2_t' : new exports.example2_t(),
        'example3_t' : new exports.example3_t(),
        'example4_t' : new exports.example4_t(),
        'example_t' : new exports.example_t(),
        'multidim_t' : new exports.multidim_t(),
        'test_package.packaged2_t' : new exports.test_package.packaged2_t(),
        'test_package.packaged_t' : new exports.test_package.packaged_t(),
        'recursive_t' : new exports.recursive_t(),
        'foo.t1' : new exports.foo.t1(),
        'foo.t2' : new exports.foo.t2(),
        'foo.bar.t3' : new exports.foo.bar.t3(),
        'bar.t4' : new exports.bar.t4(),
        'test_package.example3_t' : new exports.test_package.example3_t(),
        'unpackaged_t' : new exports.unpackaged_t(),
    };
};
