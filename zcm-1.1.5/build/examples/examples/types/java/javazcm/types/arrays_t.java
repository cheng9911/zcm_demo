/* ZCM type definition class file
 * This file was automatically generated by zcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package javazcm.types;
 
import java.io.*;
import java.util.*;
import zcm.zcm.*;
 
public final class arrays_t implements zcm.zcm.ZCMEncodable
{
    public byte m;
    public byte n;
    public boolean prim_onedim_static[];
    public short prim_onedim_dynamic[];
    public int prim_twodim_static_static[][];
    public long prim_twodim_static_dynamic[][];
    public float prim_twodim_dynamic_static[][];
    public double prim_twodim_dynamic_dynamic[][];
    public javazcm.types.example_t nonprim_onedim_static[];
    public javazcm.types.example_t nonprim_onedim_dynamic[];
    public javazcm.types.example_t nonprim_twodim_static_static[][];
    public javazcm.types.example_t nonprim_twodim_static_dynamic[][];
    public javazcm.types.example_t nonprim_twodim_dynamic_static[][];
    public javazcm.types.example_t nonprim_twodim_dynamic_dynamic[][];
 
    public arrays_t()
    {
        prim_onedim_static = new boolean[3];
        prim_twodim_static_static = new int[3][3];
        nonprim_onedim_static = new javazcm.types.example_t[3];
        nonprim_twodim_static_static = new javazcm.types.example_t[3][3];
    }
 
    public static final long ZCM_FINGERPRINT;
    public static final long ZCM_FINGERPRINT_BASE = 0x6ebeacdee9743f6bL;
 
    public static final boolean IS_LITTLE_ENDIAN = false;
    static {
        ZCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(javazcm.types.arrays_t.class))
            return 0L;
 
        classes.add(javazcm.types.arrays_t.class);
        long hash = ZCM_FINGERPRINT_BASE
             + javazcm.types.example_t._hashRecursive(classes)
             + javazcm.types.example_t._hashRecursive(classes)
             + javazcm.types.example_t._hashRecursive(classes)
             + javazcm.types.example_t._hashRecursive(classes)
             + javazcm.types.example_t._hashRecursive(classes)
             + javazcm.types.example_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>>63)&1);
    }
 
    public void encode(ZCMDataOutputStream outs) throws IOException
    {
        outs.writeLong(ZCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(ZCMDataOutputStream outs) throws IOException
    {
        outs.writeByte(this.m);
 
        outs.writeByte(this.n);
 
        for (int a = 0; a < 3; ++a) {
            outs.writeByte( this.prim_onedim_static[a] ? 1 : 0);
        }
 
        for (int a = 0; a < this.n; ++a) {
            outs.writeShort(this.prim_onedim_dynamic[a]);
        }
 
        for (int a = 0; a < 3; ++a) {
            for (int b = 0; b < 3; ++b) {
                outs.writeInt(this.prim_twodim_static_static[a][b]);
            }
        }
 
        for (int a = 0; a < 3; ++a) {
            for (int b = 0; b < this.n; ++b) {
                outs.writeLong(this.prim_twodim_static_dynamic[a][b]);
            }
        }
 
        for (int a = 0; a < this.n; ++a) {
            for (int b = 0; b < 3; ++b) {
                outs.writeFloat(this.prim_twodim_dynamic_static[a][b]);
            }
        }
 
        for (int a = 0; a < this.m; ++a) {
            for (int b = 0; b < this.n; ++b) {
                outs.writeDouble(this.prim_twodim_dynamic_dynamic[a][b]);
            }
        }
 
        for (int a = 0; a < 3; ++a) {
            this.nonprim_onedim_static[a]._encodeRecursive(outs);
        }
 
        for (int a = 0; a < this.n; ++a) {
            this.nonprim_onedim_dynamic[a]._encodeRecursive(outs);
        }
 
        for (int a = 0; a < 3; ++a) {
            for (int b = 0; b < 3; ++b) {
                this.nonprim_twodim_static_static[a][b]._encodeRecursive(outs);
            }
        }
 
        for (int a = 0; a < 3; ++a) {
            for (int b = 0; b < this.n; ++b) {
                this.nonprim_twodim_static_dynamic[a][b]._encodeRecursive(outs);
            }
        }
 
        for (int a = 0; a < this.n; ++a) {
            for (int b = 0; b < 3; ++b) {
                this.nonprim_twodim_dynamic_static[a][b]._encodeRecursive(outs);
            }
        }
 
        for (int a = 0; a < this.m; ++a) {
            for (int b = 0; b < this.n; ++b) {
                this.nonprim_twodim_dynamic_dynamic[a][b]._encodeRecursive(outs);
            }
        }
 
    }
 
    public arrays_t(byte[] data) throws IOException
    {
        this(new ZCMDataInputStream(data));
    }
 
    public arrays_t(ZCMDataInputStream ins) throws IOException
    {
        if (ins.readLong() != ZCM_FINGERPRINT)
            throw new IOException("ZCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static javazcm.types.arrays_t _decodeRecursiveFactory(ZCMDataInputStream ins) throws IOException
    {
        javazcm.types.arrays_t o = new javazcm.types.arrays_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(ZCMDataInputStream ins) throws IOException
    {
        this.m = ins.readByte();
 
        this.n = ins.readByte();
 
        this.prim_onedim_static = new boolean[(int) 3];
        for (int a = 0; a < 3; ++a) {
            this.prim_onedim_static[a] = ins.readByte()!=0;
        }
 
        this.prim_onedim_dynamic = new short[(int) n];
        for (int a = 0; a < this.n; ++a) {
            this.prim_onedim_dynamic[a] = ins.readShort();
        }
 
        this.prim_twodim_static_static = new int[(int) 3][(int) 3];
        for (int a = 0; a < 3; ++a) {
            for (int b = 0; b < 3; ++b) {
                this.prim_twodim_static_static[a][b] = ins.readInt();
            }
        }
 
        this.prim_twodim_static_dynamic = new long[(int) 3][(int) n];
        for (int a = 0; a < 3; ++a) {
            for (int b = 0; b < this.n; ++b) {
                this.prim_twodim_static_dynamic[a][b] = ins.readLong();
            }
        }
 
        this.prim_twodim_dynamic_static = new float[(int) n][(int) 3];
        for (int a = 0; a < this.n; ++a) {
            for (int b = 0; b < 3; ++b) {
                this.prim_twodim_dynamic_static[a][b] = ins.readFloat();
            }
        }
 
        this.prim_twodim_dynamic_dynamic = new double[(int) m][(int) n];
        for (int a = 0; a < this.m; ++a) {
            for (int b = 0; b < this.n; ++b) {
                this.prim_twodim_dynamic_dynamic[a][b] = ins.readDouble();
            }
        }
 
        this.nonprim_onedim_static = new javazcm.types.example_t[(int) 3];
        for (int a = 0; a < 3; ++a) {
            this.nonprim_onedim_static[a] = javazcm.types.example_t._decodeRecursiveFactory(ins);
        }
 
        this.nonprim_onedim_dynamic = new javazcm.types.example_t[(int) n];
        for (int a = 0; a < this.n; ++a) {
            this.nonprim_onedim_dynamic[a] = javazcm.types.example_t._decodeRecursiveFactory(ins);
        }
 
        this.nonprim_twodim_static_static = new javazcm.types.example_t[(int) 3][(int) 3];
        for (int a = 0; a < 3; ++a) {
            for (int b = 0; b < 3; ++b) {
                this.nonprim_twodim_static_static[a][b] = javazcm.types.example_t._decodeRecursiveFactory(ins);
            }
        }
 
        this.nonprim_twodim_static_dynamic = new javazcm.types.example_t[(int) 3][(int) n];
        for (int a = 0; a < 3; ++a) {
            for (int b = 0; b < this.n; ++b) {
                this.nonprim_twodim_static_dynamic[a][b] = javazcm.types.example_t._decodeRecursiveFactory(ins);
            }
        }
 
        this.nonprim_twodim_dynamic_static = new javazcm.types.example_t[(int) n][(int) 3];
        for (int a = 0; a < this.n; ++a) {
            for (int b = 0; b < 3; ++b) {
                this.nonprim_twodim_dynamic_static[a][b] = javazcm.types.example_t._decodeRecursiveFactory(ins);
            }
        }
 
        this.nonprim_twodim_dynamic_dynamic = new javazcm.types.example_t[(int) m][(int) n];
        for (int a = 0; a < this.m; ++a) {
            for (int b = 0; b < this.n; ++b) {
                this.nonprim_twodim_dynamic_dynamic[a][b] = javazcm.types.example_t._decodeRecursiveFactory(ins);
            }
        }
 
    }
 
    public javazcm.types.arrays_t copy()
    {
        javazcm.types.arrays_t outobj = new javazcm.types.arrays_t();
        outobj.m = this.m;
 
        outobj.n = this.n;
 
        outobj.prim_onedim_static = new boolean[(int) 3];
        System.arraycopy(this.prim_onedim_static, 0, outobj.prim_onedim_static, 0, 3); 
        outobj.prim_onedim_dynamic = new short[(int) n];
        if (this.n > 0)
            System.arraycopy(this.prim_onedim_dynamic, 0, outobj.prim_onedim_dynamic, 0, this.n); 
        outobj.prim_twodim_static_static = new int[(int) 3][(int) 3];
        for (int a = 0; a < 3; ++a) {
            System.arraycopy(this.prim_twodim_static_static[a], 0, outobj.prim_twodim_static_static[a], 0, 3);        }
 
        outobj.prim_twodim_static_dynamic = new long[(int) 3][(int) n];
        for (int a = 0; a < 3; ++a) {
            if (this.n > 0)
                System.arraycopy(this.prim_twodim_static_dynamic[a], 0, outobj.prim_twodim_static_dynamic[a], 0, this.n);        }
 
        outobj.prim_twodim_dynamic_static = new float[(int) n][(int) 3];
        for (int a = 0; a < this.n; ++a) {
            System.arraycopy(this.prim_twodim_dynamic_static[a], 0, outobj.prim_twodim_dynamic_static[a], 0, 3);        }
 
        outobj.prim_twodim_dynamic_dynamic = new double[(int) m][(int) n];
        for (int a = 0; a < this.m; ++a) {
            if (this.n > 0)
                System.arraycopy(this.prim_twodim_dynamic_dynamic[a], 0, outobj.prim_twodim_dynamic_dynamic[a], 0, this.n);        }
 
        outobj.nonprim_onedim_static = new javazcm.types.example_t[(int) 3];
        for (int a = 0; a < 3; ++a) {
            outobj.nonprim_onedim_static[a] = this.nonprim_onedim_static[a].copy();
        }
 
        outobj.nonprim_onedim_dynamic = new javazcm.types.example_t[(int) n];
        for (int a = 0; a < this.n; ++a) {
            outobj.nonprim_onedim_dynamic[a] = this.nonprim_onedim_dynamic[a].copy();
        }
 
        outobj.nonprim_twodim_static_static = new javazcm.types.example_t[(int) 3][(int) 3];
        for (int a = 0; a < 3; ++a) {
            for (int b = 0; b < 3; ++b) {
                outobj.nonprim_twodim_static_static[a][b] = this.nonprim_twodim_static_static[a][b].copy();
            }
        }
 
        outobj.nonprim_twodim_static_dynamic = new javazcm.types.example_t[(int) 3][(int) n];
        for (int a = 0; a < 3; ++a) {
            for (int b = 0; b < this.n; ++b) {
                outobj.nonprim_twodim_static_dynamic[a][b] = this.nonprim_twodim_static_dynamic[a][b].copy();
            }
        }
 
        outobj.nonprim_twodim_dynamic_static = new javazcm.types.example_t[(int) n][(int) 3];
        for (int a = 0; a < this.n; ++a) {
            for (int b = 0; b < 3; ++b) {
                outobj.nonprim_twodim_dynamic_static[a][b] = this.nonprim_twodim_dynamic_static[a][b].copy();
            }
        }
 
        outobj.nonprim_twodim_dynamic_dynamic = new javazcm.types.example_t[(int) m][(int) n];
        for (int a = 0; a < this.m; ++a) {
            for (int b = 0; b < this.n; ++b) {
                outobj.nonprim_twodim_dynamic_dynamic[a][b] = this.nonprim_twodim_dynamic_dynamic[a][b].copy();
            }
        }
 
        return outobj;
    }
 
}

