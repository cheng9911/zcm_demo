/* ZCM type definition class file
 * This file was automatically generated by zcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package javazcm.types;
 
import java.io.*;
import java.util.*;
import zcm.zcm.*;
 
public final class example2_t implements zcm.zcm.ZCMEncodable
{
    public long timestamp2;
    public double position2[];
    public double orientation2[];
    public int num_ranges2;
    public short ranges2[];
    public String name2;
    public boolean enabled2;
 
    public example2_t()
    {
        position2 = new double[3];
        orientation2 = new double[4];
    }
 
    public static final long ZCM_FINGERPRINT;
    public static final long ZCM_FINGERPRINT_BASE = 0x2caa13979d1b6e97L;
 
    public static final boolean IS_LITTLE_ENDIAN = false;
    static {
        ZCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(javazcm.types.example2_t.class))
            return 0L;
 
        classes.add(javazcm.types.example2_t.class);
        long hash = ZCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>>63)&1);
    }
 
    public void encode(ZCMDataOutputStream outs) throws IOException
    {
        outs.writeLong(ZCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(ZCMDataOutputStream outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeLong(this.timestamp2);
 
        for (int a = 0; a < 3; ++a) {
            outs.writeDouble(this.position2[a]);
        }
 
        for (int a = 0; a < 4; ++a) {
            outs.writeDouble(this.orientation2[a]);
        }
 
        outs.writeInt(this.num_ranges2);
 
        for (int a = 0; a < this.num_ranges2; ++a) {
            outs.writeShort(this.ranges2[a]);
        }
 
        __strbuf = new char[this.name2.length()]; this.name2.getChars(0, this.name2.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; ++_i) outs.write(__strbuf[_i]); outs.writeByte(0);
 
        outs.writeByte( this.enabled2 ? 1 : 0);
 
    }
 
    public example2_t(byte[] data) throws IOException
    {
        this(new ZCMDataInputStream(data));
    }
 
    public example2_t(ZCMDataInputStream ins) throws IOException
    {
        if (ins.readLong() != ZCM_FINGERPRINT)
            throw new IOException("ZCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static javazcm.types.example2_t _decodeRecursiveFactory(ZCMDataInputStream ins) throws IOException
    {
        javazcm.types.example2_t o = new javazcm.types.example2_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(ZCMDataInputStream ins) throws IOException
    {
        char[] __strbuf = null;
        this.timestamp2 = ins.readLong();
 
        this.position2 = new double[(int) 3];
        for (int a = 0; a < 3; ++a) {
            this.position2[a] = ins.readDouble();
        }
 
        this.orientation2 = new double[(int) 4];
        for (int a = 0; a < 4; ++a) {
            this.orientation2[a] = ins.readDouble();
        }
 
        this.num_ranges2 = ins.readInt();
 
        this.ranges2 = new short[(int) num_ranges2];
        for (int a = 0; a < this.num_ranges2; ++a) {
            this.ranges2[a] = ins.readShort();
        }
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; ++_i) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.name2 = new String(__strbuf);
 
        this.enabled2 = ins.readByte()!=0;
 
    }
 
    public javazcm.types.example2_t copy()
    {
        javazcm.types.example2_t outobj = new javazcm.types.example2_t();
        outobj.timestamp2 = this.timestamp2;
 
        outobj.position2 = new double[(int) 3];
        System.arraycopy(this.position2, 0, outobj.position2, 0, 3); 
        outobj.orientation2 = new double[(int) 4];
        System.arraycopy(this.orientation2, 0, outobj.orientation2, 0, 4); 
        outobj.num_ranges2 = this.num_ranges2;
 
        outobj.ranges2 = new short[(int) num_ranges2];
        if (this.num_ranges2 > 0)
            System.arraycopy(this.ranges2, 0, outobj.ranges2, 0, this.num_ranges2); 
        outobj.name2 = this.name2;
 
        outobj.enabled2 = this.enabled2;
 
        return outobj;
    }
 
}

