/* ZCM type definition class file
 * This file was automatically generated by zcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package javazcm.types;
 
import java.io.*;
import java.util.*;
import zcm.zcm.*;
 
public final class multidim_t implements zcm.zcm.ZCMEncodable
{
    public byte rows;
    public int jk;
    public double mat[][][];
 
    public multidim_t()
    {
    }
 
    public static final long ZCM_FINGERPRINT;
    public static final long ZCM_FINGERPRINT_BASE = 0xe450cfbc53e83411L;
 
    public static final boolean IS_LITTLE_ENDIAN = false;
    static {
        ZCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(javazcm.types.multidim_t.class))
            return 0L;
 
        classes.add(javazcm.types.multidim_t.class);
        long hash = ZCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>>63)&1);
    }
 
    public void encode(ZCMDataOutputStream outs) throws IOException
    {
        outs.writeLong(ZCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(ZCMDataOutputStream outs) throws IOException
    {
        outs.writeByte(this.rows);
 
        outs.writeInt(this.jk);
 
        for (int a = 0; a < this.rows; ++a) {
            for (int b = 0; b < 2; ++b) {
                for (int c = 0; c < this.jk; ++c) {
                    outs.writeDouble(this.mat[a][b][c]);
                }
            }
        }
 
    }
 
    public multidim_t(byte[] data) throws IOException
    {
        this(new ZCMDataInputStream(data));
    }
 
    public multidim_t(ZCMDataInputStream ins) throws IOException
    {
        if (ins.readLong() != ZCM_FINGERPRINT)
            throw new IOException("ZCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static javazcm.types.multidim_t _decodeRecursiveFactory(ZCMDataInputStream ins) throws IOException
    {
        javazcm.types.multidim_t o = new javazcm.types.multidim_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(ZCMDataInputStream ins) throws IOException
    {
        this.rows = ins.readByte();
 
        this.jk = ins.readInt();
 
        this.mat = new double[(int) rows][(int) 2][(int) jk];
        for (int a = 0; a < this.rows; ++a) {
            for (int b = 0; b < 2; ++b) {
                for (int c = 0; c < this.jk; ++c) {
                    this.mat[a][b][c] = ins.readDouble();
                }
            }
        }
 
    }
 
    public javazcm.types.multidim_t copy()
    {
        javazcm.types.multidim_t outobj = new javazcm.types.multidim_t();
        outobj.rows = this.rows;
 
        outobj.jk = this.jk;
 
        outobj.mat = new double[(int) rows][(int) 2][(int) jk];
        for (int a = 0; a < this.rows; ++a) {
            for (int b = 0; b < 2; ++b) {
                if (this.jk > 0)
                    System.arraycopy(this.mat[a][b], 0, outobj.mat[a][b], 0, this.jk);            }
        }
 
        return outobj;
    }
 
}

