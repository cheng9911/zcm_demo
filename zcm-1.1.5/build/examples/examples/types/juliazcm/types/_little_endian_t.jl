# THIS IS AN AUTOMATICALLY GENERATED FILE.
# DO NOT MODIFY BY HAND!!
#
# Generated by zcm-gen
#

begin
@static if VERSION < v"0.7.0-"
    @assert endswith(string(current_module()), "juliazcm.types") "Only import this module through its parent"
else
    @assert endswith(string(@__MODULE__), "juliazcm.types") "Only import this module through its parent"
end

import ZCM

export little_endian_t
mutable struct little_endian_t <: ZCM.AbstractZcmType

    # **********************
    # Members
    # **********************

    timestamp                     ::Int64
    position                      ::Array{Float64,1}
    orientation                   ::Array{Float64,1}
    num_ranges                    ::Int32
    ranges                        ::Array{Int16,1}
    name                          ::String
    enabled                       ::Bool


    # **********************
    # Constants
    # **********************

    IS_LITTLE_ENDIAN              ::Bool
    test_const_8_max_hex          ::Int8
    test_const_16_max_hex         ::Int16
    test_const_32_max_hex         ::Int32
    test_const_64_max_hex         ::Int64
    test_const_float              ::Float32
    test_const_double             ::Float64


    function little_endian_t()

        self = new()

        # **********************
        # Members
        # **********************

        self.timestamp = 0
        self.position = [ 0.0 for dim0=1:3 ]
        self.orientation = [ 0.0 for dim0=1:4 ]
        self.num_ranges = 0
        self.ranges = [ 0 for dim0=1:self.num_ranges ]
        self.name = ""
        self.enabled = false

        # **********************
        # Constants
        # **********************

        self.IS_LITTLE_ENDIAN = true
        self.test_const_8_max_hex = reinterpret(Int8,0xff)
        self.test_const_16_max_hex = reinterpret(Int16,0xffff)
        self.test_const_32_max_hex = reinterpret(Int32,0xffffffff)
        self.test_const_64_max_hex = reinterpret(Int64,0xffffffffffffffff)
        self.test_const_float = 1e-20
        self.test_const_double = 12.1e200

        return self
    end

end

const __little_endian_t_hash = Ref(Int64(0))
function ZCM._get_hash_recursive(::Type{little_endian_t}, parents::Array{String})
    if __little_endian_t_hash[] != 0; return __little_endian_t_hash[]; end
    if "little_endian_t" in parents; return 0; end
    hash::UInt64 = 0xcad67635554fdb86
    hash = (hash << 1) + ((hash >>> 63) & 0x01)
    __little_endian_t_hash[] = reinterpret(Int64, hash)
    return __little_endian_t_hash[]
end

function ZCM.getHash(::Type{little_endian_t})
    return ZCM._get_hash_recursive(little_endian_t, Array{String,1}())
end

function ZCM._encode_one(msg::little_endian_t, buf)
    write(buf, htol(msg.timestamp))
    @assert size(msg.position,1)==3 "Msg of type `little_endian_t` requires field `position` dimension `1` to be size `3`"
    for i0=1:3
        write(buf, htol(msg.position[i0]))
    end
    @assert size(msg.orientation,1)==4 "Msg of type `little_endian_t` requires field `orientation` dimension `1` to be size `4`"
    for i0=1:4
        write(buf, htol(msg.orientation[i0]))
    end
    write(buf, htol(msg.num_ranges))
    @assert size(msg.ranges,1)==msg.num_ranges "Msg of type `little_endian_t` requires field `ranges` dimension `1` to be size `msg.num_ranges`"
    for i0=1:msg.num_ranges
        write(buf, htol(msg.ranges[i0]))
    end
    write(buf, htol(UInt32(length(msg.name) + 1)))
    write(buf, msg.name)
    write(buf, UInt8(0))
    write(buf, msg.enabled)
end

function ZCM.encode(msg::little_endian_t)
    buf = IOBuffer()
    write(buf, hton(ZCM.getHash(little_endian_t)))
    ZCM._encode_one(msg, buf)
    return ZCM.take!(buf);
end

function ZCM._decode_one(::Type{little_endian_t}, buf)
    msg = little_endian_t();
    msg.timestamp = ltoh(reinterpret(Int64, read(buf, 8))[1])
    @static if VERSION < v"0.7.0-"
        msg.position = Array{Float64, 1}(3)
    else
        msg.position = Array{Float64, 1}(undef, 3)
    end
    for i0=1:3
        msg.position[i0] = ltoh(reinterpret(Float64, read(buf, 8))[1])
    end
    @static if VERSION < v"0.7.0-"
        msg.orientation = Array{Float64, 1}(4)
    else
        msg.orientation = Array{Float64, 1}(undef, 4)
    end
    for i0=1:4
        msg.orientation[i0] = ltoh(reinterpret(Float64, read(buf, 8))[1])
    end
    msg.num_ranges = ltoh(reinterpret(Int32, read(buf, 4))[1])
    @static if VERSION < v"0.7.0-"
        msg.ranges = Array{Int16, 1}(msg.num_ranges)
    else
        msg.ranges = Array{Int16, 1}(undef, msg.num_ranges)
    end
    for i0=1:msg.num_ranges
        msg.ranges[i0] = ltoh(reinterpret(Int16, read(buf, 2))[1])
    end
    msg.name = String(read(buf, ltoh(reinterpret(UInt32, read(buf, 4))[1])))[1:end-1]
    msg.enabled = reinterpret(Bool, read(buf, 1))[1]
    return msg
end

function ZCM.decode(::Type{little_endian_t}, data::Vector{UInt8})
    buf = IOBuffer(data)
    if ntoh(reinterpret(Int64, read(buf, 8))[1]) != ZCM.getHash(little_endian_t)
        throw("Decode error")
    end
    return ZCM._decode_one(little_endian_t, buf)
end

function ZCM.fieldnames(::Type{little_endian_t})
    return (
        :timestamp,
        :position,
        :orientation,
        :num_ranges,
        :ranges,
        :name,
        :enabled,
    )
end

function ZCM.constfieldnames(::Type{little_endian_t})
    return (
        :test_const_8_max_hex,
        :test_const_16_max_hex,
        :test_const_32_max_hex,
        :test_const_64_max_hex,
        :test_const_float,
        :test_const_double,
    )
end

end # `begin` block
