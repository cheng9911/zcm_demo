"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct
import os, math, bitstruct

class example_t(object):
    __slots__ = ["timestamp", "position", "orientation", "num_ranges", "ranges", "name", "enabled", "nExamples1", "nExamples2", "subExamples", "subStrings", "bitfield1", "bitfield2"]

    IS_LITTLE_ENDIAN = False;
    test_const_8_max_hex = -1;
    test_const_16_max_hex = -1;
    test_const_32_max_hex = -1;
    test_const_64_max_hex = -1;
    test_const_float = 1e-20;
    test_const_double = 12.1e200;
    test_const_string = "example";

    def __init__(self):
        self.timestamp = 0
        self.position = [ 0.0 for dim0 in range(3) ]
        self.orientation = [ 0.0 for dim0 in range(4) ]
        self.num_ranges = 0
        self.ranges = []
        self.name = ""
        self.enabled = False
        self.nExamples1 = 0
        self.nExamples2 = 0
        self.subExamples = []
        self.subStrings = []
        self.bitfield1 = 0
        self.bitfield2 = [ 0 for dim0 in range(4) ]

    def encode(self):
        buf = BytesIO()
        buf.write(example_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.timestamp))
        buf.write(struct.pack('>3d', *self.position[:3]))
        buf.write(struct.pack('>4d', *self.orientation[:4]))
        buf.write(struct.pack(">i", self.num_ranges))
        buf.write(struct.pack('>%dh' % self.num_ranges, *self.ranges[:self.num_ranges]))
        __name_encoded = self.name.encode('utf-8')
        buf.write(struct.pack('>I', len(__name_encoded)+1))
        buf.write(__name_encoded)
        buf.write(b"\0")
        buf.write(struct.pack('b', self.enabled))
        buf.write(struct.pack(">ii", self.nExamples1, self.nExamples2))
        for i0 in range(self.nExamples1):
            for i1 in range(self.nExamples2):
                assert self.subExamples[i0][i1]._get_packed_fingerprint() == example_t._get_packed_fingerprint()
                self.subExamples[i0][i1]._encode_one(buf)
        for i0 in range(self.nExamples1):
            for i1 in range(self.nExamples2):
                __subStrings_encoded = self.subStrings[i0][i1].encode('utf-8')
                buf.write(struct.pack('>I', len(__subStrings_encoded)+1))
                buf.write(__subStrings_encoded)
                buf.write(b"\0")

        # Start of bitfield 0

        offset_bit = 0;

        numbits = offset_bit + 2
        bitbuf = bytearray(math.ceil(numbits / 8))
        if (offset_bit != 0):
            buf.seek(-1, os.SEEK_CUR)
            bitbuf[0] = buf.read(1)[0]
            buf.seek(-1, os.SEEK_CUR)
        bitstruct.pack_into(">u2", bitbuf, offset_bit, self.bitfield1 & ((1 << 2) - 1))
        buf.write(bitbuf)
        offset_bit = numbits % 8

        numbits = 4 * 3
        mask = (1 << numbits) - 1
        numbits += offset_bit
        bitbuf = bytearray(math.ceil(numbits / 8))
        if (offset_bit != 0):
            buf.seek(-1, os.SEEK_CUR)
            bitbuf[0] = buf.read(1)[0]
            buf.seek(-1, os.SEEK_CUR)
        formatstr = 4 * "u3"
        bitstruct.pack_into('>' + formatstr + '>', bitbuf, offset_bit, *(f & mask for f in self.bitfield2[:4]))
        buf.write(bitbuf)
        offset_bit = numbits % 8

        # End of bitfield 0

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != example_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return example_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = example_t()
        self.timestamp = struct.unpack(">q", buf.read(8))[0]
        self.position = struct.unpack('>3d', buf.read(24))
        self.orientation = struct.unpack('>4d', buf.read(32))
        self.num_ranges = struct.unpack(">i", buf.read(4))[0]
        self.ranges = struct.unpack('>%dh' % self.num_ranges, buf.read(self.num_ranges * 2))
        __name_len = struct.unpack('>I', buf.read(4))[0]
        self.name = buf.read(__name_len)[:-1].decode('utf-8', 'replace')
        self.enabled = bool(struct.unpack('b', buf.read(1))[0])
        self.nExamples1, self.nExamples2 = struct.unpack(">ii", buf.read(8))
        self.subExamples = []
        for i0 in range(self.nExamples1):
            self.subExamples.append ([])
            for i1 in range(self.nExamples2):
                self.subExamples[i0].append(example_t._decode_one(buf))
        self.subStrings = []
        for i0 in range(self.nExamples1):
            self.subStrings.append ([])
            for i1 in range(self.nExamples2):
                __subStrings_len = struct.unpack('>I', buf.read(4))[0]
                self.subStrings[i0].append(buf.read(__subStrings_len)[:-1].decode('utf-8', 'replace'))

        # Start of bitfield 0

        offset_bit = 0;

        numbits = 2 + offset_bit
        bitbuf = buf.read(math.ceil(numbits / 8))
        self.bitfield1 = bitstruct.unpack_from(">u2>", bitbuf, offset_bit)[0]
        offset_bit = numbits % 8
        if (offset_bit != 0):
            buf.seek(-1, os.SEEK_CUR)

        numbits = 4 * 3 + offset_bit
        bitbuf = buf.read(math.ceil(numbits / 8))
        formatstr = 4 * "u3"
        self.bitfield2 = [*bitstruct.unpack_from('>' + formatstr + '>', bitbuf, offset_bit)]
        offset_bit = numbits % 8
        if (offset_bit != 0):
            buf.seek(-1, os.SEEK_CUR)

        # End of bitfield 0

        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if example_t in parents: return 0
        newparents = parents + [example_t]
        tmphash = (0x1939f4d104c8d2f8+ example_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if example_t._packed_fingerprint is None:
            example_t._packed_fingerprint = struct.pack(">Q", example_t._get_hash_recursive([]))
        return example_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

