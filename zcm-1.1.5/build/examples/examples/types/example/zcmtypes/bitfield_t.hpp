/** THIS IS AN AUTOMATICALLY GENERATED FILE.
 *  DO NOT MODIFY BY HAND!!
 *
 *  Generated by zcm-gen
 **/

#include <zcm/zcm_coretypes.h>

#ifndef __example_zcmtypes_bitfield_t_hpp__
#define __example_zcmtypes_bitfield_t_hpp__

#include <vector>


namespace example {
namespace zcmtypes {
class bitfield_t
{
    public:
        int8_t     field1;

        int8_t     field2[2][4];

        int16_t    field3;

        int16_t    field4;

        int8_t     field5;

        int8_t     field6;

        int8_t     field7;

        int8_t     field8_dim1;

        int8_t     field8_dim2;

        std::vector< std::vector< int8_t > > field8;

        int32_t    field9;

        int64_t    field10;

        uint8_t    field11;

        uint8_t    field12[3][2][2][2];

        int8_t     field13;

        int8_t     field14;

        int8_t     field15;

        int8_t     field16;

        int8_t     field17;

        uint8_t    field18;

        uint8_t    field19;

        uint8_t    field20;

        int8_t     field21;

        uint8_t    field22;

        uint8_t    field23;

        uint8_t    field24;

        int8_t     filler1;

        uint8_t    field25;

        uint8_t    field26;

        int8_t     field27;

        int8_t     field28;

        int16_t    field29;

        int16_t    field30;

        int32_t    field31;

        int32_t    field32;

        int64_t    field33;

        int64_t    field34;

    public:
        #if __cplusplus > 199711L /* if c++11 */
        static constexpr int8_t      IS_LITTLE_ENDIAN = 0;
        static constexpr uint8_t     FIELD22_TEST = 0xff;
        static constexpr uint8_t     FIELD23_TEST = 3;
        static constexpr uint8_t     FIELD24_TEST = 0x07;
        static constexpr int8_t      SIGN_TEST_0 = 0x0f;
        static constexpr int8_t      SIGN_TEST_1 = 0xf0;
        static constexpr int8_t      SIGN_TEST_2 = 0x7f;
        static constexpr int8_t      SIGN_TEST_3 = 0x80;
        static constexpr int16_t     SIGN_TEST_4 = 0x1fff;
        static constexpr int16_t     SIGN_TEST_5 = 0xe000;
        static constexpr int16_t     SIGN_TEST_6 = 0x7fff;
        static constexpr int16_t     SIGN_TEST_7 = 0x8000;
        static constexpr int32_t     SIGN_TEST_8 = 0x01ffffff;
        static constexpr int32_t     SIGN_TEST_9 = 0xfe000000;
        static constexpr int32_t     SIGN_TEST_10 = 0x7fffffff;
        static constexpr int32_t     SIGN_TEST_11 = 0x80000000;
        static constexpr int64_t     SIGN_TEST_12 = 0xffffffffffffffffLL;
        static constexpr int64_t     SIGN_TEST_13 = 0x00ffffffffffffffLL;
        static constexpr int64_t     SIGN_TEST_14 = 0xff00000000000000LL;
        static constexpr int64_t     SIGN_TEST_15 = 0x7fffffffffffffffLL;
        static constexpr int64_t     SIGN_TEST_16 = 0x8000000000000000LL;
        static constexpr uint8_t     SIGN_TEST_17 = 0x07;
        static constexpr uint8_t     SIGN_TEST_18 = 0x7f;
        static constexpr int8_t      SIGN_TEST_19 = 0x07;
        static constexpr int8_t      SIGN_TEST_20 = 0x7f;
        static constexpr int16_t     SIGN_TEST_21 = 0x0007;
        static constexpr int16_t     SIGN_TEST_22 = 0x7fff;
        static constexpr int32_t     SIGN_TEST_23 = 0x00000007;
        static constexpr int32_t     SIGN_TEST_24 = 0x7fffffff;
        static constexpr int64_t     SIGN_TEST_25 = 0x0000000000000001LL;
        static constexpr int64_t     SIGN_TEST_26 = 0x0000000000000007LL;
        static constexpr int64_t     SIGN_TEST_27 = 0x7fffffffffffffffLL;
        static constexpr uint8_t     SIGN_TEST_28 = 0x7f;
        static constexpr uint8_t     SIGN_TEST_29 = 0xff;
        static constexpr int8_t      SIGN_TEST_30 = 0x7f;
        static constexpr int8_t      SIGN_TEST_31 = 0xff;
        static constexpr int8_t      SIGN_TEST_32 = 127;
        static constexpr int8_t      SIGN_TEST_33 = -1;
        static constexpr int16_t     SIGN_TEST_34 = 0x7fff;
        static constexpr int16_t     SIGN_TEST_35 = 0xffff;
        static constexpr int16_t     SIGN_TEST_36 = 32767;
        static constexpr int16_t     SIGN_TEST_37 = -1;
        static constexpr int32_t     SIGN_TEST_38 = 0x7fffffff;
        static constexpr int32_t     SIGN_TEST_39 = 0xffffffff;
        static constexpr int32_t     SIGN_TEST_40 = 2147483647;
        static constexpr int32_t     SIGN_TEST_41 = -1;
        static constexpr int64_t     SIGN_TEST_42 = 0x7fffffffffffffffLL;
        static constexpr int64_t     SIGN_TEST_43 = 0xffffffffffffffffLL;
        static constexpr int64_t     SIGN_TEST_44 = 9223372036854775807LL;
        static constexpr int64_t     SIGN_TEST_45 = -1LL;
        #else
        static const     int8_t      IS_LITTLE_ENDIAN = 0;
        static const     uint8_t     FIELD22_TEST = 0xff;
        static const     uint8_t     FIELD23_TEST = 3;
        static const     uint8_t     FIELD24_TEST = 0x07;
        static const     int8_t      SIGN_TEST_0 = 0x0f;
        static const     int8_t      SIGN_TEST_1 = 0xf0;
        static const     int8_t      SIGN_TEST_2 = 0x7f;
        static const     int8_t      SIGN_TEST_3 = 0x80;
        static const     int16_t     SIGN_TEST_4 = 0x1fff;
        static const     int16_t     SIGN_TEST_5 = 0xe000;
        static const     int16_t     SIGN_TEST_6 = 0x7fff;
        static const     int16_t     SIGN_TEST_7 = 0x8000;
        static const     int32_t     SIGN_TEST_8 = 0x01ffffff;
        static const     int32_t     SIGN_TEST_9 = 0xfe000000;
        static const     int32_t     SIGN_TEST_10 = 0x7fffffff;
        static const     int32_t     SIGN_TEST_11 = 0x80000000;
        static const     int64_t     SIGN_TEST_12 = 0xffffffffffffffffLL;
        static const     int64_t     SIGN_TEST_13 = 0x00ffffffffffffffLL;
        static const     int64_t     SIGN_TEST_14 = 0xff00000000000000LL;
        static const     int64_t     SIGN_TEST_15 = 0x7fffffffffffffffLL;
        static const     int64_t     SIGN_TEST_16 = 0x8000000000000000LL;
        static const     uint8_t     SIGN_TEST_17 = 0x07;
        static const     uint8_t     SIGN_TEST_18 = 0x7f;
        static const     int8_t      SIGN_TEST_19 = 0x07;
        static const     int8_t      SIGN_TEST_20 = 0x7f;
        static const     int16_t     SIGN_TEST_21 = 0x0007;
        static const     int16_t     SIGN_TEST_22 = 0x7fff;
        static const     int32_t     SIGN_TEST_23 = 0x00000007;
        static const     int32_t     SIGN_TEST_24 = 0x7fffffff;
        static const     int64_t     SIGN_TEST_25 = 0x0000000000000001LL;
        static const     int64_t     SIGN_TEST_26 = 0x0000000000000007LL;
        static const     int64_t     SIGN_TEST_27 = 0x7fffffffffffffffLL;
        static const     uint8_t     SIGN_TEST_28 = 0x7f;
        static const     uint8_t     SIGN_TEST_29 = 0xff;
        static const     int8_t      SIGN_TEST_30 = 0x7f;
        static const     int8_t      SIGN_TEST_31 = 0xff;
        static const     int8_t      SIGN_TEST_32 = 127;
        static const     int8_t      SIGN_TEST_33 = -1;
        static const     int16_t     SIGN_TEST_34 = 0x7fff;
        static const     int16_t     SIGN_TEST_35 = 0xffff;
        static const     int16_t     SIGN_TEST_36 = 32767;
        static const     int16_t     SIGN_TEST_37 = -1;
        static const     int32_t     SIGN_TEST_38 = 0x7fffffff;
        static const     int32_t     SIGN_TEST_39 = 0xffffffff;
        static const     int32_t     SIGN_TEST_40 = 2147483647;
        static const     int32_t     SIGN_TEST_41 = -1;
        static const     int64_t     SIGN_TEST_42 = 0x7fffffffffffffffLL;
        static const     int64_t     SIGN_TEST_43 = 0xffffffffffffffffLL;
        static const     int64_t     SIGN_TEST_44 = 9223372036854775807LL;
        static const     int64_t     SIGN_TEST_45 = -1LL;
        #endif

    public:
        /**
         * Destructs a message properly if anything inherits from it
        */
        virtual ~bitfield_t() {}

        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void* buf, uint32_t offset, uint32_t maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline uint32_t getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to reqad while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void* buf, uint32_t offset, uint32_t maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "bitfield_t"
         */
        inline static const char* getTypeName();

        // ZCM support functions. Users should not call these
        inline int      _encodeNoHash(void* buf, uint32_t offset, uint32_t maxlen) const;
        inline uint32_t _getEncodedSizeNoHash() const;
        inline int      _decodeNoHash(const void* buf, uint32_t offset, uint32_t maxlen);
        inline static uint64_t _computeHash(const __zcm_hash_ptr* p);
};

int bitfield_t::encode(void* buf, uint32_t offset, uint32_t maxlen) const
{
    uint32_t pos = 0;
    int thislen;
    int64_t hash = (int64_t)getHash();

    thislen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int bitfield_t::decode(const void* buf, uint32_t offset, uint32_t maxlen)
{
    uint32_t pos = 0;
    int thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

uint32_t bitfield_t::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t bitfield_t::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* bitfield_t::getTypeName()
{
    return "bitfield_t";
}

int bitfield_t::_encodeNoHash(void* buf, uint32_t offset, uint32_t maxlen) const
{
    uint32_t pos_byte = 0;
    uint32_t pos_bit;
    int thislen;

    // Start of bitfield 0

    pos_bit = 0;

    thislen = __int8_t_encode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field1, 1, 2);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    for (int a0 = 0; a0 < 2; ++a0) {
        thislen = __int8_t_encode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field2[a0][0], 4, 1);
        if (thislen < 0) return thislen;
        __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);
    }

    thislen = __int16_t_encode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field3, 1, 4);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    thislen = __int16_t_encode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field4, 1, 3);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    if (pos_bit != 0) ++pos_byte;

    // End of bitfield 0

    thislen = __int8_t_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->field5, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    // Start of bitfield 1

    pos_bit = 0;

    thislen = __int8_t_encode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field6, 1, 2);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    thislen = __int8_t_encode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field7, 1, 3);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    thislen = __int8_t_encode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field8_dim1, 1, 4);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    if (pos_bit != 0) ++pos_byte;

    // End of bitfield 1

    thislen = __int8_t_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->field8_dim2, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    // Start of bitfield 2

    pos_bit = 0;

    if(this->field8_dim2 > 0) {
        for (int a0 = 0; a0 < this->field8_dim1; ++a0) {
            thislen = __int8_t_encode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field8[a0][0], this->field8_dim2, 3);
            if (thislen < 0) return thislen;
            __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);
        }
    }

    thislen = __int32_t_encode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field9, 1, 28);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    thislen = __int64_t_encode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field10, 1, 55);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    thislen = __byte_encode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field11, 1, 2);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    for (int a0 = 0; a0 < 3; ++a0) {
        for (int a1 = 0; a1 < 2; ++a1) {
            for (int a2 = 0; a2 < 2; ++a2) {
                thislen = __byte_encode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field12[a0][a1][a2][0], 2, 3);
                if (thislen < 0) return thislen;
                __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);
            }
        }
    }

    if (pos_bit != 0) ++pos_byte;

    // End of bitfield 2

    thislen = __int8_t_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->field13, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    // Start of bitfield 3

    pos_bit = 0;

    thislen = __int8_t_encode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field14, 1, 4);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    thislen = __int8_t_encode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field15, 1, 7);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    thislen = __int8_t_encode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field16, 1, 7);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    if (pos_bit != 0) ++pos_byte;

    // End of bitfield 3

    thislen = __int8_t_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->field17, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    // Start of bitfield 4

    pos_bit = 0;

    thislen = __byte_encode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field18, 1, 4);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    thislen = __byte_encode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field19, 1, 7);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    thislen = __byte_encode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field20, 1, 7);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    if (pos_bit != 0) ++pos_byte;

    // End of bitfield 4

    thislen = __int8_t_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->field21, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    // Start of bitfield 5

    pos_bit = 0;

    thislen = __byte_encode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field22, 1, 8);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    thislen = __byte_encode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field23, 1, 3);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    thislen = __byte_encode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field24, 1, 3);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    if (pos_bit != 0) ++pos_byte;

    // End of bitfield 5

    thislen = __int8_t_encode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->filler1, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    // Start of bitfield 6

    pos_bit = 0;

    thislen = __byte_encode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field25, 1, 2);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    thislen = __byte_encode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field26, 1, 8);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    thislen = __int8_t_encode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field27, 1, 2);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    thislen = __int8_t_encode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field28, 1, 7);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    thislen = __int16_t_encode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field29, 1, 2);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    thislen = __int16_t_encode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field30, 1, 15);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    thislen = __int32_t_encode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field31, 1, 4);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    thislen = __int32_t_encode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field32, 1, 31);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    thislen = __int64_t_encode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field33, 1, 4);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    thislen = __int64_t_encode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field34, 1, 63);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    if (pos_bit != 0) ++pos_byte;

    // End of bitfield 6
    return pos_byte;
}

int bitfield_t::_decodeNoHash(const void* buf, uint32_t offset, uint32_t maxlen)
{
    uint32_t pos_byte = 0;
    uint32_t pos_bit;
    int thislen;

    // Start of bitfield 0

    pos_bit = 0;

    thislen = __int8_t_decode_array_bits_sign_extend(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field1, 1, 2);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    for (int a0 = 0; a0 < 2; ++a0) {
        thislen = __int8_t_decode_array_bits_sign_extend(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field2[a0][0], 4, 1);
        if (thislen < 0) return thislen;
        __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);
    }

    thislen = __int16_t_decode_array_bits_sign_extend(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field3, 1, 4);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    thislen = __int16_t_decode_array_bits_sign_extend(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field4, 1, 3);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    if (pos_bit != 0) ++pos_byte;

    // End of bitfield 0

    thislen = __int8_t_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->field5, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    // Start of bitfield 1

    pos_bit = 0;

    thislen = __int8_t_decode_array_bits_sign_extend(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field6, 1, 2);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    thislen = __int8_t_decode_array_bits_sign_extend(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field7, 1, 3);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    thislen = __int8_t_decode_array_bits_sign_extend(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field8_dim1, 1, 4);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    if (pos_bit != 0) ++pos_byte;

    // End of bitfield 1

    thislen = __int8_t_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->field8_dim2, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    // Start of bitfield 2

    pos_bit = 0;

    this->field8.resize(this->field8_dim1);
    for (int a0 = 0; a0 < this->field8_dim1; ++a0) {
        if(this->field8_dim2 > 0) {
            this->field8[a0].resize(this->field8_dim2);
            thislen = __int8_t_decode_array_bits_sign_extend(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field8[a0][0], this->field8_dim2, 3);
            if (thislen < 0) return thislen;
            __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);
        }
    }

    thislen = __int32_t_decode_array_bits_sign_extend(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field9, 1, 28);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    thislen = __int64_t_decode_array_bits_sign_extend(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field10, 1, 55);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    thislen = __byte_decode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field11, 1, 2);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    for (int a0 = 0; a0 < 3; ++a0) {
        for (int a1 = 0; a1 < 2; ++a1) {
            for (int a2 = 0; a2 < 2; ++a2) {
                thislen = __byte_decode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field12[a0][a1][a2][0], 2, 3);
                if (thislen < 0) return thislen;
                __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);
            }
        }
    }

    if (pos_bit != 0) ++pos_byte;

    // End of bitfield 2

    thislen = __int8_t_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->field13, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    // Start of bitfield 3

    pos_bit = 0;

    thislen = __int8_t_decode_array_bits_sign_extend(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field14, 1, 4);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    thislen = __int8_t_decode_array_bits_sign_extend(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field15, 1, 7);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    thislen = __int8_t_decode_array_bits_sign_extend(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field16, 1, 7);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    if (pos_bit != 0) ++pos_byte;

    // End of bitfield 3

    thislen = __int8_t_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->field17, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    // Start of bitfield 4

    pos_bit = 0;

    thislen = __byte_decode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field18, 1, 4);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    thislen = __byte_decode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field19, 1, 7);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    thislen = __byte_decode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field20, 1, 7);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    if (pos_bit != 0) ++pos_byte;

    // End of bitfield 4

    thislen = __int8_t_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->field21, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    // Start of bitfield 5

    pos_bit = 0;

    thislen = __byte_decode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field22, 1, 8);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    thislen = __byte_decode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field23, 1, 3);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    thislen = __byte_decode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field24, 1, 3);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    if (pos_bit != 0) ++pos_byte;

    // End of bitfield 5

    thislen = __int8_t_decode_array(buf, offset + pos_byte, maxlen - pos_byte, &this->filler1, 1);
    if(thislen < 0) return thislen; else pos_byte += thislen;

    // Start of bitfield 6

    pos_bit = 0;

    thislen = __byte_decode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field25, 1, 2);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    thislen = __byte_decode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field26, 1, 8);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    thislen = __int8_t_decode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field27, 1, 2);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    thislen = __int8_t_decode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field28, 1, 7);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    thislen = __int16_t_decode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field29, 1, 2);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    thislen = __int16_t_decode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field30, 1, 15);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    thislen = __int32_t_decode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field31, 1, 4);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    thislen = __int32_t_decode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field32, 1, 31);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    thislen = __int64_t_decode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field33, 1, 4);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    thislen = __int64_t_decode_array_bits(buf, offset + pos_byte, pos_bit, maxlen - pos_byte, &this->field34, 1, 63);
    if (thislen < 0) return thislen;
    __bitfield_advance_offset(&pos_byte, &pos_bit, thislen);

    if (pos_bit != 0) ++pos_byte;

    // End of bitfield 6
    return pos_byte;
}

uint32_t bitfield_t::_getEncodedSizeNoHash() const
{
    uint32_t enc_size = 0;
    uint32_t numbits;

    numbits = 0;
    numbits += 2; // field1
    numbits += 2 * 4 * 1; // field2
    numbits += 4; // field3
    numbits += 3; // field4
    enc_size += __bitfield_encoded_size(numbits);

    enc_size += __int8_t_encoded_array_size(NULL, 1);

    numbits = 0;
    numbits += 2; // field6
    numbits += 3; // field7
    numbits += 4; // field8_dim1
    enc_size += __bitfield_encoded_size(numbits);

    enc_size += __int8_t_encoded_array_size(NULL, 1);

    numbits = 0;
    numbits += this->field8_dim1 * this->field8_dim2 * 3; // field8
    numbits += 28; // field9
    numbits += 55; // field10
    numbits += 2; // field11
    numbits += 3 * 2 * 2 * 2 * 3; // field12
    enc_size += __bitfield_encoded_size(numbits);

    enc_size += __int8_t_encoded_array_size(NULL, 1);

    numbits = 0;
    numbits += 4; // field14
    numbits += 7; // field15
    numbits += 7; // field16
    enc_size += __bitfield_encoded_size(numbits);

    enc_size += __int8_t_encoded_array_size(NULL, 1);

    numbits = 0;
    numbits += 4; // field18
    numbits += 7; // field19
    numbits += 7; // field20
    enc_size += __bitfield_encoded_size(numbits);

    enc_size += __int8_t_encoded_array_size(NULL, 1);

    numbits = 0;
    numbits += 8; // field22
    numbits += 3; // field23
    numbits += 3; // field24
    enc_size += __bitfield_encoded_size(numbits);

    enc_size += __int8_t_encoded_array_size(NULL, 1);

    numbits = 0;
    numbits += 2; // field25
    numbits += 8; // field26
    numbits += 2; // field27
    numbits += 7; // field28
    numbits += 2; // field29
    numbits += 15; // field30
    numbits += 4; // field31
    numbits += 31; // field32
    numbits += 4; // field33
    numbits += 63; // field34
    enc_size += __bitfield_encoded_size(numbits);

    return enc_size;
}

uint64_t bitfield_t::_computeHash(const __zcm_hash_ptr*)
{
    uint64_t hash = (uint64_t)0x4e73ecb0ea215bc2LL;
    return (hash<<1) + ((hash>>63)&1);
}

}

}

#endif
