// THIS IS AN AUTOMATICALLY GENERATED FILE.
// DO NOT MODIFY BY HAND!!
//
// Generated by zcm-gen

#include <stdint.h>
#include <stdlib.h>
#include <zcm/zcm_coretypes.h>
#include <zcm/zcm.h>

#ifndef _example_zcmtypes_bitfield_t_h
#define _example_zcmtypes_bitfield_t_h

#ifdef __cplusplus
extern "C" {
#endif

#define EXAMPLE_ZCMTYPES_BITFIELD_T_IS_LITTLE_ENDIAN 0
#define EXAMPLE_ZCMTYPES_BITFIELD_T_FIELD22_TEST ((uint8_t)0xff)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_FIELD23_TEST ((uint8_t)3)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_FIELD24_TEST ((uint8_t)0x07)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_0 ((int8_t)0x0f)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_1 ((int8_t)0xf0)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_2 ((int8_t)0x7f)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_3 ((int8_t)0x80)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_4 ((int16_t)0x1fff)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_5 ((int16_t)0xe000)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_6 ((int16_t)0x7fff)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_7 ((int16_t)0x8000)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_8 ((int32_t)0x01ffffff)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_9 ((int32_t)0xfe000000)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_10 ((int32_t)0x7fffffff)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_11 ((int32_t)0x80000000)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_12 ((int64_t)0xffffffffffffffffLL)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_13 ((int64_t)0x00ffffffffffffffLL)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_14 ((int64_t)0xff00000000000000LL)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_15 ((int64_t)0x7fffffffffffffffLL)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_16 ((int64_t)0x8000000000000000LL)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_17 ((uint8_t)0x07)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_18 ((uint8_t)0x7f)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_19 ((int8_t)0x07)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_20 ((int8_t)0x7f)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_21 ((int16_t)0x0007)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_22 ((int16_t)0x7fff)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_23 ((int32_t)0x00000007)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_24 ((int32_t)0x7fffffff)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_25 ((int64_t)0x0000000000000001LL)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_26 ((int64_t)0x0000000000000007LL)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_27 ((int64_t)0x7fffffffffffffffLL)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_28 ((uint8_t)0x7f)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_29 ((uint8_t)0xff)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_30 ((int8_t)0x7f)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_31 ((int8_t)0xff)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_32 ((int8_t)127)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_33 ((int8_t)-1)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_34 ((int16_t)0x7fff)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_35 ((int16_t)0xffff)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_36 ((int16_t)32767)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_37 ((int16_t)-1)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_38 ((int32_t)0x7fffffff)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_39 ((int32_t)0xffffffff)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_40 ((int32_t)2147483647)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_41 ((int32_t)-1)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_42 ((int64_t)0x7fffffffffffffffLL)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_43 ((int64_t)0xffffffffffffffffLL)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_44 ((int64_t)9223372036854775807LL)
#define EXAMPLE_ZCMTYPES_BITFIELD_T_SIGN_TEST_45 ((int64_t)-1LL)

typedef struct _example_zcmtypes_bitfield_t example_zcmtypes_bitfield_t;
struct _example_zcmtypes_bitfield_t
{
    int8_t     field1;
    int8_t     field2[2][4];
    int16_t    field3;
    int16_t    field4;
    int8_t     field5;
    int8_t     field6;
    int8_t     field7;
    int8_t     field8_dim1;
    int8_t     field8_dim2;
    int8_t     **field8;
    int32_t    field9;
    int64_t    field10;
    uint8_t    field11;
    uint8_t    field12[3][2][2][2];
    int8_t     field13;
    int8_t     field14;
    int8_t     field15;
    int8_t     field16;
    int8_t     field17;
    uint8_t    field18;
    uint8_t    field19;
    uint8_t    field20;
    int8_t     field21;
    uint8_t    field22;
    uint8_t    field23;
    uint8_t    field24;
    int8_t     filler1;
    uint8_t    field25;
    uint8_t    field26;
    int8_t     field27;
    int8_t     field28;
    int16_t    field29;
    int16_t    field30;
    int32_t    field31;
    int32_t    field32;
    int64_t    field33;
    int64_t    field34;
};

/**
 * Create a deep copy of a example_zcmtypes_bitfield_t.
 * When no longer needed, destroy it with example_zcmtypes_bitfield_t_destroy()
 */
example_zcmtypes_bitfield_t* example_zcmtypes_bitfield_t_copy(const example_zcmtypes_bitfield_t* to_copy);

/**
 * Destroy an instance of example_zcmtypes_bitfield_t created by example_zcmtypes_bitfield_t_copy()
 */
void example_zcmtypes_bitfield_t_destroy(example_zcmtypes_bitfield_t* to_destroy);

/**
 * Identifies a single subscription.  This is an opaque data type.
 */
typedef struct _example_zcmtypes_bitfield_t_subscription_t example_zcmtypes_bitfield_t_subscription_t;

/**
 * Prototype for a callback function invoked when a message of type
 * example_zcmtypes_bitfield_t is received.
 */
typedef void(*example_zcmtypes_bitfield_t_handler_t)(const zcm_recv_buf_t* rbuf,
             const char* channel, const example_zcmtypes_bitfield_t* msg, void* userdata);

/**
 * Publish a message of type example_zcmtypes_bitfield_t using ZCM.
 *
 * @param zcm The ZCM instance to publish with.
 * @param channel The channel to publish on.
 * @param msg The message to publish.
 * @return 0 on success, <0 on error.  Success means ZCM has transferred
 * responsibility of the message data to the OS.
 */
int example_zcmtypes_bitfield_t_publish(zcm_t* zcm, const char* channel, const example_zcmtypes_bitfield_t* msg);

/**
 * Subscribe to messages of type example_zcmtypes_bitfield_t using ZCM.
 *
 * @param zcm The ZCM instance to subscribe with.
 * @param channel The channel to subscribe to.
 * @param handler The callback function invoked by ZCM when a message is received.
 *                This function is invoked by ZCM during calls to zcm_handle() and
 *                zcm_handle_timeout().
 * @param userdata An opaque pointer passed to @p handler when it is invoked.
 * @return pointer to subscription type, NULL if failure. Must clean up
 *         dynamic memory by passing the pointer to example_zcmtypes_bitfield_t_unsubscribe.
 */
example_zcmtypes_bitfield_t_subscription_t* example_zcmtypes_bitfield_t_subscribe(zcm_t* zcm, const char* channel, example_zcmtypes_bitfield_t_handler_t handler, void* userdata);

/**
 * Removes and destroys a subscription created by example_zcmtypes_bitfield_t_subscribe()
 */
int example_zcmtypes_bitfield_t_unsubscribe(zcm_t* zcm, example_zcmtypes_bitfield_t_subscription_t* hid);
/**
 * Encode a message of type example_zcmtypes_bitfield_t into binary form.
 *
 * @param buf The output buffer.
 * @param offset Encoding starts at this byte offset into @p buf.
 * @param maxlen Maximum number of bytes to write.  This should generally
 *               be equal to example_zcmtypes_bitfield_t_encoded_size().
 * @param msg The message to encode.
 * @return The number of bytes encoded, or <0 if an error occured.
 */
int example_zcmtypes_bitfield_t_encode(void* buf, uint32_t offset, uint32_t maxlen, const example_zcmtypes_bitfield_t* p);

/**
 * Decode a message of type example_zcmtypes_bitfield_t from binary form.
 * When decoding messages containing strings or variable-length arrays, this
 * function may allocate memory.  When finished with the decoded message,
 * release allocated resources with example_zcmtypes_bitfield_t_decode_cleanup().
 *
 * @param buf The buffer containing the encoded message
 * @param offset The byte offset into @p buf where the encoded message starts.
 * @param maxlen The maximum number of bytes to read while decoding.
 * @param msg Output parameter where the decoded message is stored
 * @return The number of bytes decoded, or <0 if an error occured.
 */
int example_zcmtypes_bitfield_t_decode(const void* buf, uint32_t offset, uint32_t maxlen, example_zcmtypes_bitfield_t* msg);

/**
 * Release resources allocated by example_zcmtypes_bitfield_t_decode()
 * @return 0
 */
int example_zcmtypes_bitfield_t_decode_cleanup(example_zcmtypes_bitfield_t* p);

/**
 * Check how many bytes are required to encode a message of type example_zcmtypes_bitfield_t
 */
uint32_t example_zcmtypes_bitfield_t_encoded_size(const example_zcmtypes_bitfield_t* p);
uint32_t example_zcmtypes_bitfield_t_struct_size(void);
uint32_t example_zcmtypes_bitfield_t_num_fields(void);
int      example_zcmtypes_bitfield_t_get_field(const example_zcmtypes_bitfield_t* p, uint32_t i, zcm_field_t* f);
const zcm_type_info_t* example_zcmtypes_bitfield_t_get_type_info(void);

// ZCM support functions. Users should not call these
int64_t  __example_zcmtypes_bitfield_t_get_hash(void);
uint64_t __example_zcmtypes_bitfield_t_hash_recursive(const __zcm_hash_ptr* p);
int      __example_zcmtypes_bitfield_t_encode_array(void* buf, uint32_t offset, uint32_t maxlen, const example_zcmtypes_bitfield_t* p, uint32_t elements);
int      __example_zcmtypes_bitfield_t_decode_array(const void* buf, uint32_t offset, uint32_t maxlen, example_zcmtypes_bitfield_t* p, uint32_t elements);
int      __example_zcmtypes_bitfield_t_decode_array_cleanup(example_zcmtypes_bitfield_t* p, uint32_t elements);
uint32_t __example_zcmtypes_bitfield_t_encoded_array_size(const example_zcmtypes_bitfield_t* p, uint32_t elements);
uint32_t __example_zcmtypes_bitfield_t_clone_array(const example_zcmtypes_bitfield_t* p, example_zcmtypes_bitfield_t* q, uint32_t elements);

#ifdef __cplusplus
}
#endif

#endif
