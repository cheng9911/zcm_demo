"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class multidim_t(object):
    __slots__ = ["rows", "jk", "mat"]

    IS_LITTLE_ENDIAN = False;
    def __init__(self):
        self.rows = 0
        self.jk = 0
        self.mat = []

    def encode(self):
        buf = BytesIO()
        buf.write(multidim_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bi", self.rows, self.jk))
        for i0 in range(self.rows):
            for i1 in range(2):
                buf.write(struct.pack('>%dd' % self.jk, *self.mat[i0][i1][:self.jk]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != multidim_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return multidim_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = multidim_t()
        self.rows, self.jk = struct.unpack(">bi", buf.read(5))
        self.mat = []
        for i0 in range(self.rows):
            self.mat.append([])
            for i1 in range(2):
                self.mat[i0].append(struct.unpack('>%dd' % self.jk, buf.read(self.jk * 8)))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if multidim_t in parents: return 0
        tmphash = (0xe450cfbc53e83411) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if multidim_t._packed_fingerprint is None:
            multidim_t._packed_fingerprint = struct.pack(">Q", multidim_t._get_hash_recursive([]))
        return multidim_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

