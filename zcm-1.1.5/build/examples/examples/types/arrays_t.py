"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

from example_t import example_t

class arrays_t(object):
    __slots__ = ["m", "n", "prim_onedim_static", "prim_onedim_dynamic", "prim_twodim_static_static", "prim_twodim_static_dynamic", "prim_twodim_dynamic_static", "prim_twodim_dynamic_dynamic", "nonprim_onedim_static", "nonprim_onedim_dynamic", "nonprim_twodim_static_static", "nonprim_twodim_static_dynamic", "nonprim_twodim_dynamic_static", "nonprim_twodim_dynamic_dynamic"]

    IS_LITTLE_ENDIAN = False;
    def __init__(self):
        self.m = 0
        self.n = 0
        self.prim_onedim_static = [ False for dim0 in range(3) ]
        self.prim_onedim_dynamic = []
        self.prim_twodim_static_static = [ [ 0 for dim1 in range(3) ] for dim0 in range(3) ]
        self.prim_twodim_static_dynamic = [ [] for dim0 in range(3) ]
        self.prim_twodim_dynamic_static = []
        self.prim_twodim_dynamic_dynamic = []
        self.nonprim_onedim_static = [ example_t() for dim0 in range(3) ]
        self.nonprim_onedim_dynamic = []
        self.nonprim_twodim_static_static = [ [ example_t() for dim1 in range(3) ] for dim0 in range(3) ]
        self.nonprim_twodim_static_dynamic = [ [] for dim0 in range(3) ]
        self.nonprim_twodim_dynamic_static = []
        self.nonprim_twodim_dynamic_dynamic = []

    def encode(self):
        buf = BytesIO()
        buf.write(arrays_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bb", self.m, self.n))
        buf.write(struct.pack('>3b', *self.prim_onedim_static[:3]))
        buf.write(struct.pack('>%dh' % self.n, *self.prim_onedim_dynamic[:self.n]))
        for i0 in range(3):
            buf.write(struct.pack('>3i', *self.prim_twodim_static_static[i0][:3]))
        for i0 in range(3):
            buf.write(struct.pack('>%dq' % self.n, *self.prim_twodim_static_dynamic[i0][:self.n]))
        for i0 in range(self.n):
            buf.write(struct.pack('>3f', *self.prim_twodim_dynamic_static[i0][:3]))
        for i0 in range(self.m):
            buf.write(struct.pack('>%dd' % self.n, *self.prim_twodim_dynamic_dynamic[i0][:self.n]))
        for i0 in range(3):
            assert self.nonprim_onedim_static[i0]._get_packed_fingerprint() == example_t._get_packed_fingerprint()
            self.nonprim_onedim_static[i0]._encode_one(buf)
        for i0 in range(self.n):
            assert self.nonprim_onedim_dynamic[i0]._get_packed_fingerprint() == example_t._get_packed_fingerprint()
            self.nonprim_onedim_dynamic[i0]._encode_one(buf)
        for i0 in range(3):
            for i1 in range(3):
                assert self.nonprim_twodim_static_static[i0][i1]._get_packed_fingerprint() == example_t._get_packed_fingerprint()
                self.nonprim_twodim_static_static[i0][i1]._encode_one(buf)
        for i0 in range(3):
            for i1 in range(self.n):
                assert self.nonprim_twodim_static_dynamic[i0][i1]._get_packed_fingerprint() == example_t._get_packed_fingerprint()
                self.nonprim_twodim_static_dynamic[i0][i1]._encode_one(buf)
        for i0 in range(self.n):
            for i1 in range(3):
                assert self.nonprim_twodim_dynamic_static[i0][i1]._get_packed_fingerprint() == example_t._get_packed_fingerprint()
                self.nonprim_twodim_dynamic_static[i0][i1]._encode_one(buf)
        for i0 in range(self.m):
            for i1 in range(self.n):
                assert self.nonprim_twodim_dynamic_dynamic[i0][i1]._get_packed_fingerprint() == example_t._get_packed_fingerprint()
                self.nonprim_twodim_dynamic_dynamic[i0][i1]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != arrays_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return arrays_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = arrays_t()
        self.m, self.n = struct.unpack(">bb", buf.read(2))
        self.prim_onedim_static = map(bool, struct.unpack('>3b', buf.read(3)))
        self.prim_onedim_dynamic = struct.unpack('>%dh' % self.n, buf.read(self.n * 2))
        self.prim_twodim_static_static = []
        for i0 in range(3):
            self.prim_twodim_static_static.append(struct.unpack('>3i', buf.read(12)))
        self.prim_twodim_static_dynamic = []
        for i0 in range(3):
            self.prim_twodim_static_dynamic.append(struct.unpack('>%dq' % self.n, buf.read(self.n * 8)))
        self.prim_twodim_dynamic_static = []
        for i0 in range(self.n):
            self.prim_twodim_dynamic_static.append(struct.unpack('>3f', buf.read(12)))
        self.prim_twodim_dynamic_dynamic = []
        for i0 in range(self.m):
            self.prim_twodim_dynamic_dynamic.append(struct.unpack('>%dd' % self.n, buf.read(self.n * 8)))
        self.nonprim_onedim_static = []
        for i0 in range(3):
            self.nonprim_onedim_static.append(example_t._decode_one(buf))
        self.nonprim_onedim_dynamic = []
        for i0 in range(self.n):
            self.nonprim_onedim_dynamic.append(example_t._decode_one(buf))
        self.nonprim_twodim_static_static = []
        for i0 in range(3):
            self.nonprim_twodim_static_static.append ([])
            for i1 in range(3):
                self.nonprim_twodim_static_static[i0].append(example_t._decode_one(buf))
        self.nonprim_twodim_static_dynamic = []
        for i0 in range(3):
            self.nonprim_twodim_static_dynamic.append ([])
            for i1 in range(self.n):
                self.nonprim_twodim_static_dynamic[i0].append(example_t._decode_one(buf))
        self.nonprim_twodim_dynamic_static = []
        for i0 in range(self.n):
            self.nonprim_twodim_dynamic_static.append ([])
            for i1 in range(3):
                self.nonprim_twodim_dynamic_static[i0].append(example_t._decode_one(buf))
        self.nonprim_twodim_dynamic_dynamic = []
        for i0 in range(self.m):
            self.nonprim_twodim_dynamic_dynamic.append ([])
            for i1 in range(self.n):
                self.nonprim_twodim_dynamic_dynamic[i0].append(example_t._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if arrays_t in parents: return 0
        newparents = parents + [arrays_t]
        tmphash = (0x6ebeacdee9743f6b+ example_t._get_hash_recursive(newparents)+ example_t._get_hash_recursive(newparents)+ example_t._get_hash_recursive(newparents)+ example_t._get_hash_recursive(newparents)+ example_t._get_hash_recursive(newparents)+ example_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if arrays_t._packed_fingerprint is None:
            arrays_t._packed_fingerprint = struct.pack(">Q", arrays_t._get_hash_recursive([]))
        return arrays_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

