"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct
import os, math, bitstruct

class bitfield_t(object):
    __slots__ = ["field1", "field2", "field3", "field4", "field5", "field6", "field7", "field8_dim1", "field8_dim2", "field8", "field9", "field10", "field11", "field12", "field13", "field14", "field15", "field16", "field17", "field18", "field19", "field20", "field21", "field22", "field23", "field24", "filler1", "field25", "field26", "field27", "field28", "field29", "field30", "field31", "field32", "field33", "field34"]

    IS_LITTLE_ENDIAN = False;
    FIELD22_TEST = 0xff;
    FIELD23_TEST = 3;
    FIELD24_TEST = 0x07;
    SIGN_TEST_0 = 0x0f;
    SIGN_TEST_1 = -16;
    SIGN_TEST_2 = 0x7f;
    SIGN_TEST_3 = -128;
    SIGN_TEST_4 = 0x1fff;
    SIGN_TEST_5 = -8192;
    SIGN_TEST_6 = 0x7fff;
    SIGN_TEST_7 = -32768;
    SIGN_TEST_8 = 0x01ffffff;
    SIGN_TEST_9 = -33554432;
    SIGN_TEST_10 = 0x7fffffff;
    SIGN_TEST_11 = -2147483648;
    SIGN_TEST_12 = -1;
    SIGN_TEST_13 = 0x00ffffffffffffff;
    SIGN_TEST_14 = -72057594037927936;
    SIGN_TEST_15 = 0x7fffffffffffffff;
    SIGN_TEST_16 = -9223372036854775808;
    SIGN_TEST_17 = 0x07;
    SIGN_TEST_18 = 0x7f;
    SIGN_TEST_19 = 0x07;
    SIGN_TEST_20 = 0x7f;
    SIGN_TEST_21 = 0x0007;
    SIGN_TEST_22 = 0x7fff;
    SIGN_TEST_23 = 0x00000007;
    SIGN_TEST_24 = 0x7fffffff;
    SIGN_TEST_25 = 0x0000000000000001;
    SIGN_TEST_26 = 0x0000000000000007;
    SIGN_TEST_27 = 0x7fffffffffffffff;
    SIGN_TEST_28 = 0x7f;
    SIGN_TEST_29 = 0xff;
    SIGN_TEST_30 = 0x7f;
    SIGN_TEST_31 = -1;
    SIGN_TEST_32 = 127;
    SIGN_TEST_33 = -1;
    SIGN_TEST_34 = 0x7fff;
    SIGN_TEST_35 = -1;
    SIGN_TEST_36 = 32767;
    SIGN_TEST_37 = -1;
    SIGN_TEST_38 = 0x7fffffff;
    SIGN_TEST_39 = -1;
    SIGN_TEST_40 = 2147483647;
    SIGN_TEST_41 = -1;
    SIGN_TEST_42 = 0x7fffffffffffffff;
    SIGN_TEST_43 = -1;
    SIGN_TEST_44 = 9223372036854775807;
    SIGN_TEST_45 = -1;

    def __init__(self):
        self.field1 = 0
        self.field2 = [ [ 0 for dim1 in range(4) ] for dim0 in range(2) ]
        self.field3 = 0
        self.field4 = 0
        self.field5 = 0
        self.field6 = 0
        self.field7 = 0
        self.field8_dim1 = 0
        self.field8_dim2 = 0
        self.field8 = []
        self.field9 = 0
        self.field10 = 0
        self.field11 = 0
        self.field12 = [ [ [ bytearray() for dim2 in range(2) ] for dim1 in range(2) ] for dim0 in range(3) ]
        self.field13 = 0
        self.field14 = 0
        self.field15 = 0
        self.field16 = 0
        self.field17 = 0
        self.field18 = 0
        self.field19 = 0
        self.field20 = 0
        self.field21 = 0
        self.field22 = 0
        self.field23 = 0
        self.field24 = 0
        self.filler1 = 0
        self.field25 = 0
        self.field26 = 0
        self.field27 = 0
        self.field28 = 0
        self.field29 = 0
        self.field30 = 0
        self.field31 = 0
        self.field32 = 0
        self.field33 = 0
        self.field34 = 0

    def encode(self):
        buf = BytesIO()
        buf.write(bitfield_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):

        # Start of bitfield 0

        offset_bit = 0;

        numbits = offset_bit + 2
        bitbuf = bytearray(math.ceil(numbits / 8))
        if (offset_bit != 0):
            buf.seek(-1, os.SEEK_CUR)
            bitbuf[0] = buf.read(1)[0]
            buf.seek(-1, os.SEEK_CUR)
        bitstruct.pack_into(">u2", bitbuf, offset_bit, self.field1 & ((1 << 2) - 1))
        buf.write(bitbuf)
        offset_bit = numbits % 8

        for i0 in range(2):
            numbits = 4 * 1
            mask = (1 << numbits) - 1
            numbits += offset_bit
            bitbuf = bytearray(math.ceil(numbits / 8))
            if (offset_bit != 0):
                buf.seek(-1, os.SEEK_CUR)
                bitbuf[0] = buf.read(1)[0]
                buf.seek(-1, os.SEEK_CUR)
            formatstr = 4 * "u1"
            bitstruct.pack_into('>' + formatstr + '>', bitbuf, offset_bit, *(f & mask for f in self.field2[i0][:4]))
            buf.write(bitbuf)
            offset_bit = numbits % 8

        numbits = offset_bit + 7
        bitbuf = bytearray(math.ceil(numbits / 8))
        if (offset_bit != 0):
            buf.seek(-1, os.SEEK_CUR)
            bitbuf[0] = buf.read(1)[0]
            buf.seek(-1, os.SEEK_CUR)
        bitstruct.pack_into(">u4u3", bitbuf, offset_bit, self.field3 & ((1 << 4) - 1), self.field4 & ((1 << 3) - 1))
        buf.write(bitbuf)

        # End of bitfield 0

        buf.write(struct.pack(">b", self.field5))

        # Start of bitfield 1

        offset_bit = 0;

        numbits = offset_bit + 9
        bitbuf = bytearray(math.ceil(numbits / 8))
        if (offset_bit != 0):
            buf.seek(-1, os.SEEK_CUR)
            bitbuf[0] = buf.read(1)[0]
            buf.seek(-1, os.SEEK_CUR)
        bitstruct.pack_into(">u2u3u4", bitbuf, offset_bit, self.field6 & ((1 << 2) - 1), self.field7 & ((1 << 3) - 1), self.field8_dim1 & ((1 << 4) - 1))
        buf.write(bitbuf)

        # End of bitfield 1

        buf.write(struct.pack(">b", self.field8_dim2))

        # Start of bitfield 2

        offset_bit = 0;

        for i0 in range(self.field8_dim1):
            numbits = self.field8_dim2 * 3
            mask = (1 << numbits) - 1
            numbits += offset_bit
            bitbuf = bytearray(math.ceil(numbits / 8))
            if (offset_bit != 0):
                buf.seek(-1, os.SEEK_CUR)
                bitbuf[0] = buf.read(1)[0]
                buf.seek(-1, os.SEEK_CUR)
            formatstr = self.field8_dim2 * "u3"
            bitstruct.pack_into('>' + formatstr + '>', bitbuf, offset_bit, *(f & mask for f in self.field8[i0][:self.field8_dim2]))
            buf.write(bitbuf)
            offset_bit = numbits % 8

        numbits = offset_bit + 85
        bitbuf = bytearray(math.ceil(numbits / 8))
        if (offset_bit != 0):
            buf.seek(-1, os.SEEK_CUR)
            bitbuf[0] = buf.read(1)[0]
            buf.seek(-1, os.SEEK_CUR)
        bitstruct.pack_into(">u28u55u2", bitbuf, offset_bit, self.field9 & ((1 << 28) - 1), self.field10 & ((1 << 55) - 1), self.field11 & ((1 << 2) - 1))
        buf.write(bitbuf)
        offset_bit = numbits % 8

        for i0 in range(3):
            for i1 in range(2):
                for i2 in range(2):
                    numbits = 2 * 3
                    mask = (1 << numbits) - 1
                    numbits += offset_bit
                    bitbuf = bytearray(math.ceil(numbits / 8))
                    if (offset_bit != 0):
                        buf.seek(-1, os.SEEK_CUR)
                        bitbuf[0] = buf.read(1)[0]
                        buf.seek(-1, os.SEEK_CUR)
                    formatstr = 2 * "u3"
                    bitstruct.pack_into('>' + formatstr + '>', bitbuf, offset_bit, *(f & mask for f in self.field12[i0][i1][i2][:2]))
                    buf.write(bitbuf)
                    offset_bit = numbits % 8


        # End of bitfield 2

        buf.write(struct.pack(">b", self.field13))

        # Start of bitfield 3

        offset_bit = 0;

        numbits = offset_bit + 18
        bitbuf = bytearray(math.ceil(numbits / 8))
        if (offset_bit != 0):
            buf.seek(-1, os.SEEK_CUR)
            bitbuf[0] = buf.read(1)[0]
            buf.seek(-1, os.SEEK_CUR)
        bitstruct.pack_into(">u4u7u7", bitbuf, offset_bit, self.field14 & ((1 << 4) - 1), self.field15 & ((1 << 7) - 1), self.field16 & ((1 << 7) - 1))
        buf.write(bitbuf)

        # End of bitfield 3

        buf.write(struct.pack(">b", self.field17))

        # Start of bitfield 4

        offset_bit = 0;

        numbits = offset_bit + 18
        bitbuf = bytearray(math.ceil(numbits / 8))
        if (offset_bit != 0):
            buf.seek(-1, os.SEEK_CUR)
            bitbuf[0] = buf.read(1)[0]
            buf.seek(-1, os.SEEK_CUR)
        bitstruct.pack_into(">u4u7u7", bitbuf, offset_bit, self.field18 & ((1 << 4) - 1), self.field19 & ((1 << 7) - 1), self.field20 & ((1 << 7) - 1))
        buf.write(bitbuf)

        # End of bitfield 4

        buf.write(struct.pack(">b", self.field21))

        # Start of bitfield 5

        offset_bit = 0;

        numbits = offset_bit + 14
        bitbuf = bytearray(math.ceil(numbits / 8))
        if (offset_bit != 0):
            buf.seek(-1, os.SEEK_CUR)
            bitbuf[0] = buf.read(1)[0]
            buf.seek(-1, os.SEEK_CUR)
        bitstruct.pack_into(">u8u3u3", bitbuf, offset_bit, self.field22 & ((1 << 8) - 1), self.field23 & ((1 << 3) - 1), self.field24 & ((1 << 3) - 1))
        buf.write(bitbuf)

        # End of bitfield 5

        buf.write(struct.pack(">b", self.filler1))

        # Start of bitfield 6

        offset_bit = 0;

        numbits = offset_bit + 138
        bitbuf = bytearray(math.ceil(numbits / 8))
        if (offset_bit != 0):
            buf.seek(-1, os.SEEK_CUR)
            bitbuf[0] = buf.read(1)[0]
            buf.seek(-1, os.SEEK_CUR)
        bitstruct.pack_into(">u2u8u2u7u2u15u4u31u4u63", bitbuf, offset_bit, self.field25 & ((1 << 2) - 1), self.field26 & ((1 << 8) - 1), self.field27 & ((1 << 2) - 1), self.field28 & ((1 << 7) - 1), self.field29 & ((1 << 2) - 1), self.field30 & ((1 << 15) - 1), self.field31 & ((1 << 4) - 1), self.field32 & ((1 << 31) - 1), self.field33 & ((1 << 4) - 1), self.field34 & ((1 << 63) - 1))
        buf.write(bitbuf)
        # End of bitfield 6

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != bitfield_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return bitfield_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = bitfield_t()

        # Start of bitfield 0

        offset_bit = 0;

        numbits = 2 + offset_bit
        bitbuf = buf.read(math.ceil(numbits / 8))
        self.field1 = bitstruct.unpack_from(">s2>", bitbuf, offset_bit)[0]
        offset_bit = numbits % 8
        if (offset_bit != 0):
            buf.seek(-1, os.SEEK_CUR)

        self.field2 = []
        for i0 in range(2):
            numbits = 4 * 1 + offset_bit
            bitbuf = buf.read(math.ceil(numbits / 8))
            formatstr = 4 * "s1"
            self.field2.append([*bitstruct.unpack_from('>' + formatstr + '>', bitbuf, offset_bit)])
            offset_bit = numbits % 8
            if (offset_bit != 0):
                buf.seek(-1, os.SEEK_CUR)

        numbits = 7 + offset_bit
        bitbuf = buf.read(math.ceil(numbits / 8))
        self.field3, self.field4 = bitstruct.unpack_from(">s4s3>", bitbuf, offset_bit)

        # End of bitfield 0

        self.field5 = struct.unpack(">b", buf.read(1))[0]

        # Start of bitfield 1

        offset_bit = 0;

        numbits = 9 + offset_bit
        bitbuf = buf.read(math.ceil(numbits / 8))
        self.field6, self.field7, self.field8_dim1 = bitstruct.unpack_from(">s2s3s4>", bitbuf, offset_bit)

        # End of bitfield 1

        self.field8_dim2 = struct.unpack(">b", buf.read(1))[0]

        # Start of bitfield 2

        offset_bit = 0;

        self.field8 = []
        for i0 in range(self.field8_dim1):
            numbits = self.field8_dim2 * 3 + offset_bit
            bitbuf = buf.read(math.ceil(numbits / 8))
            formatstr = self.field8_dim2 * "s3"
            self.field8.append([*bitstruct.unpack_from('>' + formatstr + '>', bitbuf, offset_bit)])
            offset_bit = numbits % 8
            if (offset_bit != 0):
                buf.seek(-1, os.SEEK_CUR)

        numbits = 85 + offset_bit
        bitbuf = buf.read(math.ceil(numbits / 8))
        self.field9, self.field10, self.field11 = bitstruct.unpack_from(">s28s55u2>", bitbuf, offset_bit)
        offset_bit = numbits % 8
        if (offset_bit != 0):
            buf.seek(-1, os.SEEK_CUR)

        self.field12 = []
        for i0 in range(3):
            self.field12.append([])
            for i1 in range(2):
                self.field12[i0].append([])
                for i2 in range(2):
                    numbits = 2 * 3 + offset_bit
                    bitbuf = buf.read(math.ceil(numbits / 8))
                    formatstr = 2 * "u3"
                    self.field12[i0][i1].append([*bitstruct.unpack_from('>' + formatstr + '>', bitbuf, offset_bit)])
                    offset_bit = numbits % 8
                    if (offset_bit != 0):
                        buf.seek(-1, os.SEEK_CUR)

        if (offset_bit != 0):
            buf.seek(1, os.SEEK_CUR)

        # End of bitfield 2

        self.field13 = struct.unpack(">b", buf.read(1))[0]

        # Start of bitfield 3

        offset_bit = 0;

        numbits = 18 + offset_bit
        bitbuf = buf.read(math.ceil(numbits / 8))
        self.field14, self.field15, self.field16 = bitstruct.unpack_from(">s4s7s7>", bitbuf, offset_bit)

        # End of bitfield 3

        self.field17 = struct.unpack(">b", buf.read(1))[0]

        # Start of bitfield 4

        offset_bit = 0;

        numbits = 18 + offset_bit
        bitbuf = buf.read(math.ceil(numbits / 8))
        self.field18, self.field19, self.field20 = bitstruct.unpack_from(">u4u7u7>", bitbuf, offset_bit)

        # End of bitfield 4

        self.field21 = struct.unpack(">b", buf.read(1))[0]

        # Start of bitfield 5

        offset_bit = 0;

        numbits = 14 + offset_bit
        bitbuf = buf.read(math.ceil(numbits / 8))
        self.field22, self.field23, self.field24 = bitstruct.unpack_from(">u8u3u3>", bitbuf, offset_bit)

        # End of bitfield 5

        self.filler1 = struct.unpack(">b", buf.read(1))[0]

        # Start of bitfield 6

        offset_bit = 0;

        numbits = 138 + offset_bit
        bitbuf = buf.read(math.ceil(numbits / 8))
        self.field25, self.field26, self.field27, self.field28, self.field29, self.field30, self.field31, self.field32, self.field33, self.field34 = bitstruct.unpack_from(">u2u8u2u7u2u15u4u31u4u63>", bitbuf, offset_bit)
        # End of bitfield 6

        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if bitfield_t in parents: return 0
        tmphash = (0x4e73ecb0ea215bc2) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if bitfield_t._packed_fingerprint is None:
            bitfield_t._packed_fingerprint = struct.pack(">Q", bitfield_t._get_hash_recursive([]))
        return bitfield_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

