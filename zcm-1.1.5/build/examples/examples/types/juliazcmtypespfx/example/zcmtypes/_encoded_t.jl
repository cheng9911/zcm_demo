# THIS IS AN AUTOMATICALLY GENERATED FILE.
# DO NOT MODIFY BY HAND!!
#
# Generated by zcm-gen
#

begin
@static if VERSION < v"0.7.0-"
    @assert endswith(string(current_module()), "juliazcmtypespfx.example.zcmtypes") "Only import this module through its parent"
else
    @assert endswith(string(@__MODULE__), "juliazcmtypespfx.example.zcmtypes") "Only import this module through its parent"
end

import ZCM

export encoded_t
mutable struct encoded_t <: ZCM.AbstractZcmType

    # **********************
    # Members
    # **********************

    n                             ::Int32
    msg                           ::Array{UInt8,1}


    function encoded_t()

        self = new()

        # **********************
        # Members
        # **********************

        self.n = 0
        self.msg = [ 0 for dim0=1:self.n ]

        return self
    end

end

const __example_zcmtypes_encoded_t_hash = Ref(Int64(0))
function ZCM._get_hash_recursive(::Type{encoded_t}, parents::Array{String})
    if __example_zcmtypes_encoded_t_hash[] != 0; return __example_zcmtypes_encoded_t_hash[]; end
    if "example_zcmtypes_encoded_t" in parents; return 0; end
    hash::UInt64 = 0xc9386f1b86e36eb6
    hash = (hash << 1) + ((hash >>> 63) & 0x01)
    __example_zcmtypes_encoded_t_hash[] = reinterpret(Int64, hash)
    return __example_zcmtypes_encoded_t_hash[]
end

function ZCM.getHash(::Type{encoded_t})
    return ZCM._get_hash_recursive(encoded_t, Array{String,1}())
end

function ZCM._encode_one(msg::encoded_t, buf)
    write(buf, hton(msg.n))
    @assert size(msg.msg,1)==msg.n "Msg of type `example.zcmtypes.encoded_t` requires field `msg` dimension `1` to be size `msg.n`"
    for i0=1:msg.n
        write(buf, hton(msg.msg[i0]))
    end
end

function ZCM.encode(msg::encoded_t)
    buf = IOBuffer()
    write(buf, hton(ZCM.getHash(encoded_t)))
    ZCM._encode_one(msg, buf)
    return ZCM.take!(buf);
end

function ZCM._decode_one(::Type{encoded_t}, buf)
    msg = encoded_t();
    msg.n = ntoh(reinterpret(Int32, read(buf, 4))[1])
    @static if VERSION < v"0.7.0-"
        msg.msg = Array{UInt8, 1}(msg.n)
    else
        msg.msg = Array{UInt8, 1}(undef, msg.n)
    end
    for i0=1:msg.n
        msg.msg[i0] = reinterpret(UInt8, read(buf, 1))[1]
    end
    return msg
end

function ZCM.decode(::Type{encoded_t}, data::Vector{UInt8})
    buf = IOBuffer(data)
    if ntoh(reinterpret(Int64, read(buf, 8))[1]) != ZCM.getHash(encoded_t)
        throw("Decode error")
    end
    return ZCM._decode_one(encoded_t, buf)
end

function ZCM.fieldnames(::Type{encoded_t})
    return (
        :n,
        :msg,
    )
end

function ZCM.constfieldnames(::Type{encoded_t})
    return (
    )
end

end # `begin` block
