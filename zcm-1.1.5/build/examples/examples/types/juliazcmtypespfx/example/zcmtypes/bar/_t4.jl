# THIS IS AN AUTOMATICALLY GENERATED FILE.
# DO NOT MODIFY BY HAND!!
#
# Generated by zcm-gen
#

begin
@static if VERSION < v"0.7.0-"
    @assert endswith(string(current_module()), "juliazcmtypespfx.example.zcmtypes.bar") "Only import this module through its parent"
else
    @assert endswith(string(@__MODULE__), "juliazcmtypespfx.example.zcmtypes.bar") "Only import this module through its parent"
end

import ZCM

export t4
mutable struct t4 <: ZCM.AbstractZcmType

    # **********************
    # Members
    # **********************

    x                             ::ZCM.AbstractZcmType # juliazcmtypespfx.example.zcmtypes.foo.t2


    function t4()

        self = new()

        # **********************
        # Members
        # **********************

        self.x = __basemodule.example.zcmtypes.foo.t2()

        return self
    end

end

const __example_zcmtypes_bar_t4_hash = Ref(Int64(0))
function ZCM._get_hash_recursive(::Type{t4}, parents::Array{String})
    if __example_zcmtypes_bar_t4_hash[] != 0; return __example_zcmtypes_bar_t4_hash[]; end
    if "example_zcmtypes_bar_t4" in parents; return 0; end
    newparents::Array{String} = [parents[:]; "example_zcmtypes_bar_t4"::String];
    hash::UInt64 = 0x1234567802743400 + reinterpret(UInt64, ZCM._get_hash_recursive(__basemodule.example.zcmtypes.foo.t2, newparents))
    hash = (hash << 1) + ((hash >>> 63) & 0x01)
    __example_zcmtypes_bar_t4_hash[] = reinterpret(Int64, hash)
    return __example_zcmtypes_bar_t4_hash[]
end

function ZCM.getHash(::Type{t4})
    return ZCM._get_hash_recursive(t4, Array{String,1}())
end

function ZCM._encode_one(msg::t4, buf)
    @assert isa(msg.x, __basemodule.example.zcmtypes.foo.t2) "Msg of type `example.zcmtypes.bar.t4` requires field `x` to be of type `example.zcmtypes.foo.t2`"
    ZCM._encode_one(msg.x,buf)
end

function ZCM.encode(msg::t4)
    buf = IOBuffer()
    write(buf, hton(ZCM.getHash(t4)))
    ZCM._encode_one(msg, buf)
    return ZCM.take!(buf);
end

function ZCM._decode_one(::Type{t4}, buf)
    msg = t4();
    msg.x = ZCM._decode_one(__basemodule.example.zcmtypes.foo.t2,buf)
    return msg
end

function ZCM.decode(::Type{t4}, data::Vector{UInt8})
    buf = IOBuffer(data)
    if ntoh(reinterpret(Int64, read(buf, 8))[1]) != ZCM.getHash(t4)
        throw("Decode error")
    end
    return ZCM._decode_one(t4, buf)
end

function ZCM.fieldnames(::Type{t4})
    return (
        :x,
    )
end

function ZCM.constfieldnames(::Type{t4})
    return (
    )
end

end # `begin` block
