// THIS IS AN AUTOMATICALLY GENERATED FILE.
// DO NOT MODIFY BY HAND!!
//
// Generated by zcm-gen

#include <stdint.h>
#include <stdlib.h>
#include <zcm/zcm_coretypes.h>
#include <zcm/zcm.h>

#ifndef _little_endian_t_h
#define _little_endian_t_h

#ifdef __cplusplus
extern "C" {
#endif

#define LITTLE_ENDIAN_T_IS_LITTLE_ENDIAN 1
#define LITTLE_ENDIAN_T_test_const_8_max_hex ((int8_t)0xff)
#define LITTLE_ENDIAN_T_test_const_16_max_hex ((int16_t)0xffff)
#define LITTLE_ENDIAN_T_test_const_32_max_hex ((int32_t)0xffffffff)
#define LITTLE_ENDIAN_T_test_const_64_max_hex ((int64_t)0xffffffffffffffffLL)
#define LITTLE_ENDIAN_T_test_const_float ((float)1e-20)
#define LITTLE_ENDIAN_T_test_const_double ((double)12.1e200)

typedef struct _little_endian_t little_endian_t;
struct _little_endian_t
{
    int64_t    timestamp;
    double     position[3];
    double     orientation[4];
    int32_t    num_ranges;
    int16_t    *ranges;
    char*      name;
    int8_t     enabled;
};

/**
 * Create a deep copy of a little_endian_t.
 * When no longer needed, destroy it with little_endian_t_destroy()
 */
little_endian_t* little_endian_t_copy(const little_endian_t* to_copy);

/**
 * Destroy an instance of little_endian_t created by little_endian_t_copy()
 */
void little_endian_t_destroy(little_endian_t* to_destroy);

/**
 * Identifies a single subscription.  This is an opaque data type.
 */
typedef struct _little_endian_t_subscription_t little_endian_t_subscription_t;

/**
 * Prototype for a callback function invoked when a message of type
 * little_endian_t is received.
 */
typedef void(*little_endian_t_handler_t)(const zcm_recv_buf_t* rbuf,
             const char* channel, const little_endian_t* msg, void* userdata);

/**
 * Publish a message of type little_endian_t using ZCM.
 *
 * @param zcm The ZCM instance to publish with.
 * @param channel The channel to publish on.
 * @param msg The message to publish.
 * @return 0 on success, <0 on error.  Success means ZCM has transferred
 * responsibility of the message data to the OS.
 */
int little_endian_t_publish(zcm_t* zcm, const char* channel, const little_endian_t* msg);

/**
 * Subscribe to messages of type little_endian_t using ZCM.
 *
 * @param zcm The ZCM instance to subscribe with.
 * @param channel The channel to subscribe to.
 * @param handler The callback function invoked by ZCM when a message is received.
 *                This function is invoked by ZCM during calls to zcm_handle() and
 *                zcm_handle_timeout().
 * @param userdata An opaque pointer passed to @p handler when it is invoked.
 * @return pointer to subscription type, NULL if failure. Must clean up
 *         dynamic memory by passing the pointer to little_endian_t_unsubscribe.
 */
little_endian_t_subscription_t* little_endian_t_subscribe(zcm_t* zcm, const char* channel, little_endian_t_handler_t handler, void* userdata);

/**
 * Removes and destroys a subscription created by little_endian_t_subscribe()
 */
int little_endian_t_unsubscribe(zcm_t* zcm, little_endian_t_subscription_t* hid);
/**
 * Encode a message of type little_endian_t into binary form.
 *
 * @param buf The output buffer.
 * @param offset Encoding starts at this byte offset into @p buf.
 * @param maxlen Maximum number of bytes to write.  This should generally
 *               be equal to little_endian_t_encoded_size().
 * @param msg The message to encode.
 * @return The number of bytes encoded, or <0 if an error occured.
 */
int little_endian_t_encode(void* buf, uint32_t offset, uint32_t maxlen, const little_endian_t* p);

/**
 * Decode a message of type little_endian_t from binary form.
 * When decoding messages containing strings or variable-length arrays, this
 * function may allocate memory.  When finished with the decoded message,
 * release allocated resources with little_endian_t_decode_cleanup().
 *
 * @param buf The buffer containing the encoded message
 * @param offset The byte offset into @p buf where the encoded message starts.
 * @param maxlen The maximum number of bytes to read while decoding.
 * @param msg Output parameter where the decoded message is stored
 * @return The number of bytes decoded, or <0 if an error occured.
 */
int little_endian_t_decode(const void* buf, uint32_t offset, uint32_t maxlen, little_endian_t* msg);

/**
 * Release resources allocated by little_endian_t_decode()
 * @return 0
 */
int little_endian_t_decode_cleanup(little_endian_t* p);

/**
 * Check how many bytes are required to encode a message of type little_endian_t
 */
uint32_t little_endian_t_encoded_size(const little_endian_t* p);
uint32_t little_endian_t_struct_size(void);
uint32_t little_endian_t_num_fields(void);
int      little_endian_t_get_field(const little_endian_t* p, uint32_t i, zcm_field_t* f);
const zcm_type_info_t* little_endian_t_get_type_info(void);

// ZCM support functions. Users should not call these
int64_t  __little_endian_t_get_hash(void);
uint64_t __little_endian_t_hash_recursive(const __zcm_hash_ptr* p);
int      __little_endian_t_encode_array(void* buf, uint32_t offset, uint32_t maxlen, const little_endian_t* p, uint32_t elements);
int      __little_endian_t_decode_array(const void* buf, uint32_t offset, uint32_t maxlen, little_endian_t* p, uint32_t elements);
int      __little_endian_t_decode_array_cleanup(little_endian_t* p, uint32_t elements);
uint32_t __little_endian_t_encoded_array_size(const little_endian_t* p, uint32_t elements);
uint32_t __little_endian_t_clone_array(const little_endian_t* p, little_endian_t* q, uint32_t elements);

#ifdef __cplusplus
}
#endif

#endif
